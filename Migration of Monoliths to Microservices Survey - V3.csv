"Carimbo de data/hora","1.1 What areas have you been working on these past 5 years?
Tick all that apply.","1.2. What is your title? 
E.g., Senior Developer, Architect, Principal Software Engineer, Tester, etc.","1.3. Which country are you working from?","1.4. What is your professional experience in Microservices (in years)?","1.5. How many projects that involved the migration of monoliths to microservices have you been involved in?","1.6. What were the domain areas of these projects?","1.7. Roughly how many monthly active users did these systems serve when the process of migrating to microservices was started?","1.8. Roughly how many people were working on these systems when the process of migrating to microservices was started?","2.1.  Where do you look for guidance when migrating a monolith system to microservices?
Tick all that apply","2.2.  How do you often plan the migration of a monolith to microservices in regards to the evolution of the product?
Tick all that apply","2.3. How likely are you to consider these data sources when deciding how to decompose a monolith into different services?  [The output of static analysis tools (e.g., based on source code repository analysis)]","2.3. How likely are you to consider these data sources when deciding how to decompose a monolith into different services?  [The output of dynamic analysis tools (e.g., based on runtime data, such as logs or traces)]","2.3. How likely are you to consider these data sources when deciding how to decompose a monolith into different services?  [Development process data (e.g., from version-control, project management tools)]","2.3. How likely are you to consider these data sources when deciding how to decompose a monolith into different services?  [Software Documentation (e.g., business logic/capabilities/objects, data flow) and related artifacts (e.g., source code, configuration files)]","2.4. Which criteria do you use often for deciding the new service boundaries when decomposing a monolith into different services? 
Tick all that apply","3.1. Thinking of the migration from monolith to microservices projects you have been involved in, have you been assisted by any automated or semi-automated tools?","3.2. If yes, which tools were used and for which purpose?","3.3. Which type of tools did you find the most useful?","3.4. In which of these activities would you most appreciate additional tool support?
Tick at most 5 options.","3.5. What characteristics would you find most important in a tool for refactoring towards a microservice architecture?
Tick at most 8 options.","4.1. Tell us to which degree you agree with the following statements in the scope of the techniques presented below:

""In the migration project(s) in which I have been involved the use of this technique was important"" [Strangler Fig]","4.1. Tell us to which degree you agree with the following statements in the scope of the techniques presented below:

""In the migration project(s) in which I have been involved the use of this technique was important"" [UI Composition]","4.1. Tell us to which degree you agree with the following statements in the scope of the techniques presented below:

""In the migration project(s) in which I have been involved the use of this technique was important"" [Branch by Abstraction]","4.1. Tell us to which degree you agree with the following statements in the scope of the techniques presented below:

""In the migration project(s) in which I have been involved the use of this technique was important"" [Parallel Run]","4.1. Tell us to which degree you agree with the following statements in the scope of the techniques presented below:

""In the migration project(s) in which I have been involved the use of this technique was important"" [Decorating Collaborator]","4.1. Tell us to which degree you agree with the following statements in the scope of the techniques presented below:

""In the migration project(s) in which I have been involved the use of this technique was important"" [Change Data Capture]","4.1. Tell us to which degree you agree with the following statements in the scope of the techniques presented below:

""In the migration project(s) in which I have been involved the use of this technique was important"" [Change code dependency to service call]","4.2.  Which of these techniques do you often use together? Do you use them ""before"", ""after"" or ""as a step of""?","4.3. In your experience, what are the main challenges of applying these techniques?","5.1. Tell us to which degree you agree with the following statements in the scope of the techniques presented below:

""In the migration project(s) in which I have been involved the use of this technique was important"" [Database View]","5.1. Tell us to which degree you agree with the following statements in the scope of the techniques presented below:

""In the migration project(s) in which I have been involved the use of this technique was important"" [Database Wrapping Service]","5.1. Tell us to which degree you agree with the following statements in the scope of the techniques presented below:

""In the migration project(s) in which I have been involved the use of this technique was important"" [Database-as-a-Service Interface]","5.1. Tell us to which degree you agree with the following statements in the scope of the techniques presented below:

""In the migration project(s) in which I have been involved the use of this technique was important"" [Aggregate Exposing the Monolith]","5.1. Tell us to which degree you agree with the following statements in the scope of the techniques presented below:

""In the migration project(s) in which I have been involved the use of this technique was important"" [Change Data Ownership]","5.1. Tell us to which degree you agree with the following statements in the scope of the techniques presented below:

""In the migration project(s) in which I have been involved the use of this technique was important"" [Synchronize Data in Application]","5.1. Tell us to which degree you agree with the following statements in the scope of the techniques presented below:

""In the migration project(s) in which I have been involved the use of this technique was important"" [Tracer Write]","5.1. Tell us to which degree you agree with the following statements in the scope of the techniques presented below:

""In the migration project(s) in which I have been involved the use of this technique was important"" [Split Table]","5.1. Tell us to which degree you agree with the following statements in the scope of the techniques presented below:

""In the migration project(s) in which I have been involved the use of this technique was important"" [Move Foreign-Key Relationship to Code]","5.2. Which of these techniques do you often use together? Do you use them ""before"", ""after"" or ""as a step of"" each other?","5.3. In your experience, what are the main challenges of applying these techniques?","6.1. What other techniques or patterns have you used in the migration process that were not mentioned in this survey?","6.2. In your opinion, which are the most important challenges faced in the migration process?
Tick at most 9 options.","7.1. Do you usually evaluate the result of a decomposition? How?","7.2. What quality attributes do you assess when evaluating the decomposition result?
Tick at most 4 options.","7.3. Why?","7.4. What metrics would you use to evaluate these quality attributes? Why?
Example: I use the throughput (e.g., requests per second) to measure the efficiency.","7.5. In which environments do you evaluate a decomposition result?
Tick all that apply","7.6. What kind of inputs do you use to evaluate a decomposition result?
Tick all that apply"
"2022/12/30 9:00:39 da tarde CET","Software Development;Software Architecture;Operations;Coaching;Scientific Research","Principal Engineer","UK","10","5","Finance","10K â€“ 100K","< 10","Scientific articles;Books;Web resources, blogs;Other practitioners' experiences","Rewrite/rebuild the entire system from scratch;Stop product evolution, refactor it to microservices, and then proceed with evolving the product;Continuous refactoring interspersed with product evolution","Unlikely","Neutral","Likely","Likely","Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design);Based on coupling and cohesion of the business logic of the monolith (i.e., keep strongly-coupled elements of the implementation in the same services);Based on coupling and cohesion of the data owned by the monolith (i.e., keep strongly-coupled data entities managed by the same services)","No","","Wikis, Architecture diagrams","Understanding the monolith;Deciding services boundaries","Multiple decompositions alternatives;Provide an explanation of candidate decompositions;Provide a visualization of candidate decompositions;Provide an analysis of the changes of quality attributes and metrics","Agree","Agree","Agree","Disagree","Disagree","Disagree","Agree","Parallel run, branch by abstraction ","Keep the old system running and have a smooth transition to microservices","Neutral","Neutral","Neutral","Neutral","Agree","Agree","Agree","Neutral","Agree","Sync data, and tracer write","Wrong microservices boundaries may end up in data split across microservices","","Database migration and data store splitting;Ensuring data consistency;Decoupling services from the monolith;Effort estimation","All use cases should be validated, and tested automatically, perhaps with continuous testing","Performance, Efficiency;Security;Scalability;Availability","We evaluate more QA than these 4, so that we can compare with the Monolith and with the projected growth","Throughput and latency for performance, percentage of errors and no response for availability. Security is measured externally by penetration tests. Scalability is measured by throughput and latency under performance tests.","Development;Staging;Production","Functional tests;Production"
"2023/01/04 2:28:23 da tarde CET","Software Development;Software Architecture;Operations","Senior Software Engineer","Spain","8","5","Media, IT services","> 1M","10 â€“ 50","Internal consulting;Analysis and internal discussions","Develop new features in the new system, refactor old features according to capacity","Likely","Likely","Likely","Likely","Decomposition by business capability (i.e., so that the decomposition reflects the structure of the organization, its teams and business units);Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design)","Yes","Testing output of the two systems","","Evaluating a decomposition result;Regression testing","Doing the refactoring quickly","Strongly Agree","Agree","Agree","Strongly Agree","Agree","Neutral","Agree","Strangler Fig and Parallel run","","Strongly Disagree","Strongly Disagree","Strongly Disagree","Strongly Disagree","Strongly Agree","Strongly Agree","Agree","Disagree","Neutral","Change Data Ownership & Synchronize Data in Application","Migration of data","","Database migration and data store splitting;Dealing with data consistency;Service orchestration","Check before/after metrics, such us: uptime, MTTR, response time, time to market. Some metrics are more difficult to evaluate, some others are easier","Maintainability;Performance, Efficiency;Scalability;Availability","","Depending on what is the product, it could change. For websites I have normally been using response time for performance, % of failed requests for availability, etc","Development;Staging;Production","Functional tests;Simulation;Production"
"2023/01/04 3:04:49 da tarde CET","Software Development;Software Architecture","Staff Engineer","US","10","2","Real Estate;public safety","10K â€“ 100K","50 â€“ 200","Conference presentations;Web resources, blogs;Other practitioners' experiences;Internal consulting","Continuous refactoring interspersed with product evolution","Likely","Likely","Likely","Likely","Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design);Based on coupling and cohesion of the business logic of the monolith (i.e., keep strongly-coupled elements of the implementation in the same services);Based on coupling and cohesion of the data owned by the monolith (i.e., keep strongly-coupled data entities managed by the same services)","No","","","Regression testing;Deployment automation","This process is often very manual I wouldn't find many tools to be useful","Strongly Agree","Strongly Agree","Agree","Neutral","Agree","Strongly Disagree","Agree","","Microservices are often not the right solution for many companies and when teams migrate to them they end up making their existing problems worse if done incorrectly (very common).","Neutral","Agree","Agree","Agree","Strongly Agree","Disagree","Agree","Strongly Disagree","Agree","","Getting the data ownership right. Sharing schemas across services is always dangerous, even in a read only capacity. You don't want someone else's service taking down a database you own.","The practice of going back to a monolith after the split to microservices made things worse :).","Database migration and data store splitting;Continuous deployment/integration;Effort estimation;Expected long-term return on investment (ROI);Team organization;Getting teams to agree on the vision for which services to build and what data they should own.","In my experience on the two full migrations we have done is was not worth the effort.

We evaluate if the ROI was worth it. (Are developers more productive, is it easy to troubleshoot, is it more/less scalable, etc.)","Maintainability;Business-related indicators;Availability;Team Agility","","This is different for every company. Sometimes you split services for scalability, other times you split them to solve organizational challenges.","Production","Functional tests;Production"
"2023/01/04 3:51:21 da tarde CET","Software Development;Software Architecture;Operations;Scientific Research","Staff Engineer","US","10","4","media","> 1M","10 â€“ 50","Conference presentations;Web resources, blogs;Other practitioners' experiences","Continuous refactoring interspersed with product evolution","Neutral","Very unlikely","Unlikely","Unlikely","Based on coupling and cohesion of the business logic of the monolith (i.e., keep strongly-coupled elements of the implementation in the same services);Based on coupling and cohesion of the data owned by the monolith (i.e., keep strongly-coupled data entities managed by the same services)","No","","","none","no tools needed","Agree","Strongly Disagree","Strongly Disagree","Strongly Disagree","Strongly Disagree","Strongly Disagree","Neutral","The definitions provided don't align with how I know them to be used. ","No challenges","Strongly Disagree","Strongly Disagree","Strongly Disagree","Strongly Disagree","Strongly Disagree","Strongly Disagree","Strongly Disagree","Strongly Disagree","Strongly Disagree","","I've never seen any of these used successfully. New services get completely new data sources and data models. ","strangler + new data sources is the only way to fly","none","Performance metrics","Performance, Efficiency;Scalability","We wouldn't need to break it up if it could scale in its existing form.","rps, latency, cpu, memory, instances used, network throughput","Development;Production","Functional tests;Production"
"2023/01/04 5:22:30 da tarde CET","Operations","Head of Platform","United States and Brazil","6","3","Healthcare;Education;Internet Marketing","100K â€“ 1M","< 10","Conference presentations;Web resources, blogs;Other practitioners' experiences","Stop product evolution, refactor the system to microservices, and then proceed with evolving the product;Continuous refactoring interspersed with product evolution","Likely","Very likely","Very likely","Likely","Based on coupling and cohesion of the business logic of the monolith (i.e., keep strongly-coupled elements of the implementation in the same services)","No","","","Deciding services boundaries;Regression testing;Deployment automation;Microservice API design","Ease of use;Being actively maintained;Multiple decompositions alternatives;Provide an explanation of candidate decompositions;Provide a visualization of candidate decompositions;Edit/model a candidate decomposition","Neutral","Neutral","Neutral","Neutral","Neutral","Neutral","Neutral","","","Neutral","Neutral","Neutral","Neutral","Neutral","Neutral","Neutral","Neutral","Neutral",".",".",".","Database migration and data store splitting;Dealing with data consistency",".","Maintainability;Performance, Efficiency;Scalability;Availability",".",".","Development;Staging;Production","Functional tests;Simulation;Production"
"2023/01/05 2:26:19 da tarde CET","Software Development","Developer","Brazil","1","1","Security","100 â€“ 1K","10 â€“ 50","Scientific articles;Books;External consulting","Rewrite/rebuild the entire system from scratch","Very likely","Very likely","Likely","Very likely","Decomposition by business capability (i.e., so that the decomposition reflects the structure of the organization, its teams and business units);Based on coupling and cohesion of the business logic of the monolith (i.e., keep strongly-coupled elements of the implementation in the same services);Based on lexical similarity (e.g., joining in the same service API endpoints with similar names)","Yes","","","Refactoring code;Deployment automation;Microservice API design","Versatility â€“ usable via command line, within IDEs, independently, etc.;Doing the refactoring quickly;Having successful case studies reported;Easy modifications on restrictions without having to start over;Provide an explanation of candidate decompositions;Edit/model a candidate decomposition","Strongly Agree","Strongly Agree","Strongly Agree","Strongly Agree","Strongly Agree","Agree","Strongly Agree","","","Strongly Agree","Strongly Agree","Strongly Agree","Strongly Agree","Strongly Agree","Strongly Agree","Strongly Agree","Strongly Agree","Strongly Agree","","","","Dealing with data consistency;Service orchestration;Effort estimation;Infrastructure to support microservices;Ensuring reliability;Ensuring scalability;Ensuring security","  ","Maintainability;Reusability;Security;Scalability","","    ","Development","Simulation"
"2023/01/05 3:39:17 da tarde CET","Software Development;Software Architecture;Operations","Senior DevOps Engineer","Portugal","4","3","Automotive;Agriculture","10K â€“ 100K","50 â€“ 200","Web resources, blogs;Other practitioners' experiences;Internal consulting","Continuous refactoring interspersed with product evolution","Very likely","Likely","Very likely","Likely","Decomposition by business capability (i.e., so that the decomposition reflects the structure of the organization, its teams and business units);Based on coupling and cohesion of the business logic of the monolith (i.e., keep strongly-coupled elements of the implementation in the same services);Based on coupling and cohesion of the data owned by the monolith (i.e., keep strongly-coupled data entities managed by the same services);Based on lexical similarity (e.g., joining in the same service API endpoints with similar names)","Yes","CI/CD pipelines, SonarQube Analysis, Terraform/Terragrunt","Terraform/Terragrunt","Refactoring code;Regression testing;Microservice API design","Versatility â€“ usable via command line, within IDEs, independently, etc.;Having successful case studies reported;Easy modifications on restrictions without having to start over;Provide comprehensive decomposition guidance","Neutral","Agree","Agree","Strongly Agree","Neutral","Neutral","Agree","Parallel Run","Not so much time offered to plan the technique accordingly, Lack of the knowledge of the technical team, different clients asking the same microservice API","Agree","Neutral","Agree","Agree","Agree","Strongly Agree","Agree","Agree","Strongly Agree","Synchronize Data in Application","What is the best timing to sync the data: usually before coding changes to have a ready-to-go database","All techniques mentioned in this survey","Database migration and data store splitting;Dealing with data consistency;Communication among services;Ensuring code maintainability;Decoupling services from the monolith;Microservices statefulness;Effort estimation;Infrastructure to support microservices;Ensuring reliability","Not so much","Maintainability;Reusability;Scalability;Availability","Because they are important in a decomposition for a successful migration to microservices","Usage of the requests per second and rate of failure on the API, delay/performance","Development;Production","Functional tests"
"2023/01/05 8:01:17 da tarde CET","Software Development;Software Architecture;Coaching","Senior Developer and Mentor","Canada","7","3","Real Estate;media licensing","< 100","< 10","Books;Web resources, blogs;Other practitioners' experiences","Rewrite/rebuild the entire system from scratch;Continuous refactoring interspersed with product evolution","Very unlikely","Very unlikely","Unlikely","Unlikely","Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design)","No","","","Regression testing","Versatility â€“ usable via command line, within IDEs, independently, etc.;Support for various programming languages;Being actively maintained","Neutral","Neutral","Neutral","Neutral","Neutral","Neutral","Neutral","Don't use them","","Neutral","Agree","Neutral","Neutral","Neutral","Agree","Neutral","Neutral","Agree","DB as service and Sync Data tend to go hand in hand. FK move used when splitting aggregate roots and view needs composition of all data.","Several: if maintaining parallel development, the DB schema is being modified as you are trying to extract it causing a never-ending cycle of implementation. If the DB was MySQL, then cross DB queries can be extremely difficult to deal with when those DBs are physically separated to different servers. Less of an issue with Postgres and schemas, but a similar situation can arise if there are cross-schema queries.","Event storming the application with key stakeholders to ascertain actual needs or otherwise planning through discussion what needs to be done.","Database migration and data store splitting;Dealing with data consistency;Communication among services;Ensuring security","Does the new service function and work consistently? Can new functionality be added to it without impacting on other services? Is performance at least equal to before. An APM product such as Tideways, NewRelic or Backfire helps track these things.","Maintainability;Performance, Efficiency;Business-related indicators","","Can the split apps respond faster to changing business needs? Can we deploy without downtime?","Development;Staging;Production","Functional tests;Simulation;Production"
"2023/01/06 5:05:52 da tarde CET","Software Development;Software Architecture;Operations;Quality assurance;Product Management;Coaching","DevOps Engineer","Mexico","4","2","Finance;Manufacturing","1K â€“ 10K","10 â€“ 50","Books;Web resources, blogs","Rewrite/rebuild the entire system from scratch;Continuous refactoring interspersed with product evolution","Very likely","Likely","Likely","Neutral","Decomposition by business capability (i.e., so that the decomposition reflects the structure of the organization, its teams and business units);Based on coupling and cohesion of the data owned by the monolith (i.e., keep strongly-coupled data entities managed by the same services)","Yes","Terraform, Ansible, CircleCI, GitHub Actions","IaC and Testing","Understanding the monolith;Deployment automation","Versatility â€“ usable via command line, within IDEs, independently, etc.;Support for various programming languages;Being actively maintained","Strongly Agree","Agree","Neutral","Strongly Agree","Agree","Disagree","Agree","Parallel Run","resistance to change, communicate the updates, and support from executive area","Agree","Agree","Strongly Agree","Neutral","Neutral","Disagree","Neutral","Agree","Disagree","Database-as-a-Service Interface","The original data structure and the maturity of the bussines processes to accept changes.","No","Database migration and data store splitting;Communication among services;Microservices statefulness;Ensuring reliability","Metrics, we need to start the monitoring process before start. Data!!","Maintainability;Performance, Efficiency;Security;Team Agility","Knowledge's team is the most important part of the process, knowledge arount the security of the project and the knowledge about the internal behaivor to have a maintainable product.","No","Staging;Production","Simulation;Production"
"2023/01/07 7:04:10 da tarde CET","Software Development","Software Engineer","United Kingdom","2","3","Retail","< 100","10 â€“ 50","Other practitioners' experiences;External consulting;Internal consulting","Continuous refactoring interspersed with product evolution","Very unlikely","Very unlikely","Very unlikely","Likely","Decomposition by business capability (i.e., so that the decomposition reflects the structure of the organization, its teams and business units);Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design);Based on coupling and cohesion of the business logic of the monolith (i.e., keep strongly-coupled elements of the implementation in the same services);Based on coupling and cohesion of the data owned by the monolith (i.e., keep strongly-coupled data entities managed by the same services)","Yes","Github CoPilot","Github CoPilot","Refactoring code","Ease of use;Versatility â€“ usable via command line, within IDEs, independently, etc.;Being actively maintained;Ability to apply restrictions to the decomposition result;Easy modifications on restrictions without having to start over;Multiple decompositions alternatives;Provide a visualization of candidate decompositions;Edit/model a candidate decomposition","Strongly Agree","Agree","Strongly Disagree","Agree","Strongly Agree","Strongly Agree","Agree","Strangler Fig is the overall approach, replace one part at a time. Then we make a new UI for something that people switch to, then we re-route the backend to our own service that interacts with the legacy in the background, and eventually we become the master of the data by telling legacy what it is now and listening to legacy for updates. Once everyone switches to us as the source, legacy can be turned off.","It takes much longer than it would to start from scratch, and compiling lots of data from different sources.","Agree","Agree","Disagree","Neutral","Agree","Strongly Agree","Strongly Agree","Strongly Disagree","Disagree","","","","Database migration and data store splitting;Dealing with data consistency;Decoupling services from the monolith;Service orchestration;Effort estimation",".","Maintainability;Business-related indicators;Scalability;Team Agility","The monolith is unmaintainable, that's why we're moving away from it and often too slow. I don't see a diff between Scalability and Performance, Efficiency.",".","Development;Staging;Production","Functional tests;Production"
"2023/01/08 8:44:59 da manhÃ£ CET","Software Development;Software Architecture","Engineering manager","spain","12","2","Travel and Tourism;Supply Chain Management","> 1M","200 â€“ 600","Books;Other practitioners' experiences","Continuous refactoring interspersed with product evolution","Likely","Unlikely","Likely","Very likely","Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design);Based on coupling and cohesion of the business logic of the monolith (i.e., keep strongly-coupled elements of the implementation in the same services)","No","","","Deciding services boundaries;Evaluating a decomposition result","Ease of use;Being actively maintained;Having successful case studies reported;Ability to apply restrictions to the decomposition result;Provide an explanation of candidate decompositions;Edit/model a candidate decomposition;Provide comprehensive decomposition guidance","Strongly Agree","Strongly Agree","Disagree","Agree","Strongly Disagree","Strongly Disagree","Strongly Disagree","","","Agree","Neutral","Strongly Disagree","Strongly Disagree","Strongly Disagree","Agree","Strongly Disagree","Strongly Disagree","Strongly Disagree","","","","Database migration and data store splitting;Decoupling services from the monolith;Effort estimation;Expected long-term return on investment (ROI);Ensuring reliability","yes","Performance, Efficiency;Business-related indicators;Team Agility","","cycle time, time to deploy","Staging;Production","Production"
"2023/01/08 6:19:20 da tarde CET","Operations;Quality assurance","Head of DevOps and Quality","Brazil","7","4","Finance;Retail","10K â€“ 100K","200 â€“ 600","Books;Conference presentations;Web resources, blogs;Internal consulting","Rewrite/rebuild the entire system from scratch;Stop product evolution, refactor the system to microservices, and then proceed with evolving the product","Likely","Neutral","Very likely","Very likely","Decomposition by business capability (i.e., so that the decomposition reflects the structure of the organization, its teams and business units);Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design);Based on coupling and cohesion of the data owned by the monolith (i.e., keep strongly-coupled data entities managed by the same services)","No","","Performance tools, APMs, Static Snalysis (Sonarqube), Version Control (GitHub)","Deciding services boundaries;Refactoring code;Evaluating a decomposition result;Analysis of organizational restructuring needs (team size, team organization, etc.);Microservice API design","Support for various programming languages;Requiring minimal manual inputs;Being actively maintained;Having successful case studies reported;Provide an explanation of candidate decompositions;Provide a visualization of candidate decompositions;Provide comprehensive decomposition guidance;Provide an analysis of the changes of quality attributes and metrics","Strongly Agree","Neutral","Agree","Neutral","Strongly Disagree","Agree","Neutral","Stangler fig during code and implementation of new services; Branch by Abstraction during implementation; Change data Capture during planning for migration, microservices development and implementation; Besides these techniques, database migrations using scripts to change data structure have been also used during development, implementation, and production phases.","Risk of production disruptions / Good microservice design considering boundaries when using DDD.  ","Agree","Neutral","Neutral","Disagree","Agree","Strongly Agree","Neutral","Disagree","Agree","Database View, Change Data Ownership, Synchronize Data in Application and Move Foreign-Key Relationship to Code. In my experience, Synchronize Data in Application was the most used one.","Data sincronization issues, risk of making the source for monolith inconsistent and changes that are really dificult to rollback. ","Service proxy between the monolith and the new services","Database migration and data store splitting;Dealing with data consistency;Ensuring code maintainability;Microservices statefulness;Team organization;Ensuring reliability;Ensuring scalability;Ensuring security","Mainly evaluation related with non-functional requirements.","Performance, Efficiency;Security;Scalability;Availability","As my work is focused mainly on APP Infrastructure and Non-Functional requirements, the options chosen were related to these areas.","Response time, number of simultaneos requests and errors to measure Performance, Efficiency and Scalability; SLI/SLO to measure availability, number of bugs, vulnerabilities and code coverage to measure security and code quality.","Development;Staging","Functional tests;Simulation;Production"
"2023/01/08 10:21:16 da tarde CET","Software Development;Software Architecture;Operations","Senior Software Engineer","Portugal","10","5","Finance;Retail;Education","100 â€“ 1K","< 10","Scientific articles;Other practitioners' experiences;Internal consulting","Rewrite/rebuild the entire system from scratch;Continuous refactoring interspersed with product evolution","Very likely","Very likely","Very likely","Very likely","Decomposition by business capability (i.e., so that the decomposition reflects the structure of the organization, its teams and business units);Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design);Based on lexical similarity (e.g., joining in the same service API endpoints with similar names)","Yes","Home-made tools for data migration, for instance ","Test automation ","Understanding the monolith;Deciding services boundaries;Refactoring code;Regression testing;Microservice API design","Ease of use;Versatility â€“ usable via command line, within IDEs, independently, etc.;Requiring minimal manual inputs;Multiple decompositions alternatives;Provide an explanation of candidate decompositions;Provide a visualization of candidate decompositions;Edit/model a candidate decomposition","Strongly Agree","Agree","Strongly Agree","Disagree","Neutral","Disagree","Agree","All above","Business ","Strongly Agree","Agree","Agree","Neutral","Strongly Disagree","Agree","Neutral","Neutral","Disagree","All above","Corruption ","","Dealing with data consistency;Multitenancy;Continuous deployment/integration;Effort estimation;Expected long-term return on investment (ROI);Ensuring reliability","Smoke tests","Maintainability;Business-related indicators;Security;Availability","Quality and data are always my biggest concerns ","Data must be correct","Development;Staging;Production","Functional tests;Simulation;Production"
"2023/01/09 11:11:13 da manhÃ£ CET","Software Development;Software Architecture;Product Management;Coaching;Scientific Research","Principal Engineer, Principal Architect & Technical Product Manager","Portugal","10","17","Finance;Retail;Security;Supply Chain Management;Marketplace ","> 1M","50 â€“ 200","Scientific articles;Books;Conference presentations;Web resources, blogs;Other practitioners' experiences","Rewrite/rebuild the entire system from scratch;Continuous refactoring interspersed with product evolution","Likely","Likely","Likely","Likely","Decomposition by business capability (i.e., so that the decomposition reflects the structure of the organization, its teams and business units);Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design);Based on coupling and cohesion of the data owned by the monolith (i.e., keep strongly-coupled data entities managed by the same services)","No","","","Refactoring code;Regression testing","Ease of use;Requiring minimal manual inputs;Being actively maintained;Ability to apply restrictions to the decomposition result;Multiple decompositions alternatives;Provide a visualization of candidate decompositions;Edit/model a candidate decomposition;Provide an analysis of the changes of quality attributes and metrics","Strongly Agree","Strongly Agree","Strongly Agree","Strongly Agree","Strongly Agree","Strongly Agree","Strongly Agree","","Knowing when to apply each and applying th correctly","Strongly Agree","Agree","Disagree","Neutral","Agree","Neutral","Neutral","Neutral","Neutral","","","","Database migration and data store splitting;Dealing with data consistency;Decoupling services from the monolith;Service orchestration;Microservices statefulness;Ensuring reliability;Ensuring security","Yes","Performance, Efficiency;Security;Scalability;Availability","","Latency & Throughput","Development;Staging","Functional tests;Simulation"
"2023/01/09 12:06:43 da tarde CET","Software Development;Software Architecture;Operations","Senior Software Developer","Portugal","3","2","Supply Chain Management;Taxes consulting ","10K â€“ 100K","50 â€“ 200","Books;Conference presentations;Web resources, blogs;Other practitioners' experiences;External consulting","Stop product evolution, refactor the system to microservices, and then proceed with evolving the product;Continuous refactoring interspersed with product evolution","Unlikely","Likely","Likely","Very likely","Decomposition by business capability (i.e., so that the decomposition reflects the structure of the organization, its teams and business units);Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design);Based on coupling and cohesion of the business logic of the monolith (i.e., keep strongly-coupled elements of the implementation in the same services)","Yes","CI, CD, SCA, SAST, APM, Alerts, Container Orchestration","CI and CD automation ","Evaluating a decomposition result;Regression testing;Planning and managing the refactoring process;Microservice API design","Ease of use;Versatility â€“ usable via command line, within IDEs, independently, etc.;Support for various programming languages;Requiring minimal manual inputs;Multiple decompositions alternatives;Provide a visualization of candidate decompositions;Edit/model a candidate decomposition;Provide comprehensive decomposition guidance","Strongly Agree","Agree","Disagree","Strongly Agree","Disagree","Disagree","Strongly Agree","","","Strongly Agree","Strongly Agree","Agree","Strongly Agree","Strongly Agree","Agree","Agree","Agree","Strongly Agree","","","","Database migration and data store splitting;Communication among services;Decoupling services from the monolith;Effort estimation;Team organization;Infrastructure to support microservices;Selecting infrastructure patterns;Ensuring reliability;Ensuring security","Chasing metrics evolution ","Performance, Efficiency;Reusability;Availability;Team Agility","","Mean Time to Resolve, Time to marketing, Throughput, Deploy Frequency and Change Frequency Rate","Staging;Production","Production"
"2023/01/09 12:31:24 da tarde CET","Software Development;Software Architecture;Coaching;Teaching","Software Architect","Spain","9","5","Retail;Social Media;Travel and Tourism;Automotive;mobility and transport","> 1M","10 â€“ 50","Books;Conference presentations;Web resources, blogs;Other practitioners' experiences","Rewrite/rebuild the entire system from scratch;Continuous refactoring interspersed with product evolution","Neutral","Unlikely","Very unlikely","Very likely","Decomposition by business capability (i.e., so that the decomposition reflects the structure of the organization, its teams and business units);Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design)","Yes","CI/CD pipelines, Pact for contract testing, k8s for releases into Blue/Green deployments","Contract testing tools","Regression testing","Ease of use;Versatility â€“ usable via command line, within IDEs, independently, etc.;Support for various programming languages;Requiring minimal manual inputs;Being actively maintained","Strongly Agree","Strongly Disagree","Neutral","Agree","Agree","Neutral","Strongly Disagree","Strangler Fig + Parallel Run","Knowledge of the full system","Strongly Disagree","Agree","Disagree","Neutral","Strongly Agree","Agree","Agree","Neutral","Disagree","","Knowledge of the whole db system","","Database migration and data store splitting;Decoupling services from the monolith;Service orchestration;Team organization;Ensuring reliability;Ensuring scalability;Ensuring security","System test shouldn't be affected by the migration, everything should work as it did before","Performance, Efficiency;Reusability;Scalability;Team Agility","because those are usually the drivers to migrate","fitness functions","Development;Staging","Functional tests;Simulation"
"2023/01/09 1:23:53 da tarde CET","Software Development;Software Architecture","Staff engineer","Brazil","6","2","Finance;Retail","> 1M","10 â€“ 50","Scientific articles;Books;Conference presentations","Rewrite/rebuild the entire system from scratch;Stop product evolution, refactor the system to microservices, and then proceed with evolving the product;Continuous refactoring interspersed with product evolution","Very likely","Very likely","Likely","Unlikely","Decomposition by business capability (i.e., so that the decomposition reflects the structure of the organization, its teams and business units);Based on coupling and cohesion of the business logic of the monolith (i.e., keep strongly-coupled elements of the implementation in the same services);During the process we mix several strategies including data model complexibility, memory/cpu/storage/network usage and PCI scope ","Yes","New relic APM/pganalyse in order to check whereas the desired computing profile was reached, github actions for ci/CD, postman for manual QA","New relic / github actions","Understanding the monolith;Regression testing;Deployment automation;Analysis of organizational restructuring needs (team size, team organization, etc.);Planning and managing the refactoring process","Ease of use;Requiring minimal manual inputs;Being actively maintained;Having successful case studies reported;Multiple decompositions alternatives;Provide a visualization of candidate decompositions","Neutral","Strongly Agree","Strongly Agree","Disagree","Neutral","Strongly Disagree","Strongly Agree","It depends on how much risk the domain can handle... PCI can't take too much risk, so we split the monolith to several libs and then put them to run separately (change code dependency to service call) ","Mapping risks / convincing stake holders of your choice ","Disagree","Disagree","Strongly Disagree","Agree","Strongly Agree","Disagree","Disagree","Disagree","Strongly Disagree","Change data ownership whenever possible, or try to aggregate exposing the monolith as first step (only when changing ownership is not viable) ","Data flow and ownership on running system are really sensitive, so you need to make sure your data structure fits the migration process as well ","No specific names, but we search for success cases among other professionals ","Service orchestration;Effort estimation;Team organization;Ensuring security","Maintenance effort / infrastructure costs","Maintainability;Performance, Efficiency;Security;Availability","Actually all above, except for business impact. It should never be your target when refactoring (as business goal may change) ","Throughout, error rate, resources utilization and team happiness ","Development;Staging;Production","Functional tests;Simulation;Production"
"2023/01/09 1:35:45 da tarde CET","Software Development;Software Architecture;Scientific Research","Senior Developer","Brazil","10","5","Education;government, environment","100 â€“ 1K","< 10","Web resources, blogs;Other practitioners' experiences;Internal consulting","Rewrite/rebuild the entire system from scratch;Stop product evolution, refactor the system to microservices, and then proceed with evolving the product;Continuous refactoring interspersed with product evolution","Unlikely","Unlikely","Likely","Likely","Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design);Based on coupling and cohesion of the business logic of the monolith (i.e., keep strongly-coupled elements of the implementation in the same services);Based on coupling and cohesion of the data owned by the monolith (i.e., keep strongly-coupled data entities managed by the same services);Based on lexical similarity (e.g., joining in the same service API endpoints with similar names)","No","","","Understanding the monolith;Deciding services boundaries;Refactoring code;Analysis of organizational restructuring needs (team size, team organization, etc.);Microservice API design","Ease of use;Versatility â€“ usable via command line, within IDEs, independently, etc.;Support for various programming languages;Having successful case studies reported;Multiple decompositions alternatives;Provide a visualization of candidate decompositions;Edit/model a candidate decomposition;Provide an analysis of the changes of quality attributes and metrics","Strongly Agree","Strongly Agree","Disagree","Disagree","Agree","Strongly Disagree","Agree","Strangler Fig Application and UI Composition together","Learn about the business domain and fix any tight couplings that are not needed.","Strongly Agree","Agree","Neutral","Neutral","Neutral","Strongly Agree","Neutral","Neutral","Agree","Database View and after Synchronize Data in Application","Ensure that all old services continue to function, as older monoliths may have been architecturally eroded and have undetected dependencies on parts of the data storage schema.","Extract class, Replace Inheritance with Delegation","Database migration and data store splitting;Dealing with data consistency;Ensuring code maintainability;Decoupling services from the monolith;Effort estimation;Expected long-term return on investment (ROI);Team organization;Ensuring reliability;Ensuring security","Identifying the points of improvement that will favor the evolution of the business.","Performance, Efficiency;Reusability;Scalability;Team Agility","The selected attributes are fundamental to make application development faster, reusable and scalable. This contributes to the expected ROI.","I try to identify how practical the new architecture was in terms of maintenance. I make sure it's easy to evolve and insert new components easily. I also check the capacity of requests per second to verify performance.","Development;Production","Simulation;Production"
"2023/01/09 2:04:11 da tarde CET","Software Development;Software Architecture;Product Management;Coaching;Teaching","Staff Software Engineer","Brazil","3","1","Travel and Tourism","> 1M","10 â€“ 50","Books;Conference presentations;Web resources, blogs","Continuous refactoring interspersed with product evolution","Neutral","Likely","Likely","Very likely","Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design);Based on coupling and cohesion of the business logic of the monolith (i.e., keep strongly-coupled elements of the implementation in the same services);Based on coupling and cohesion of the data owned by the monolith (i.e., keep strongly-coupled data entities managed by the same services)","No","","","Understanding the monolith;Deciding services boundaries;Refactoring code;Regression testing;Deployment automation","Ease of use;Support for various programming languages;Being actively maintained;Having successful case studies reported;Multiple decompositions alternatives;Provide an explanation of candidate decompositions;Edit/model a candidate decomposition;Provide comprehensive decomposition guidance","Strongly Agree","Agree","Agree","Agree","Neutral","Neutral","Agree","I mostly used the 1, 3 and 4 for most cases. The Idea is to change the backend in a backward compatible way first, create the new service versions in parallel then change the clients.","The main challenge is not to have downtime. We increase the number of steps for that.","Strongly Agree","Neutral","Neutral","Agree","Neutral","Neutral","Neutral","Neutral","Agree","","The most challenging part is downtime. Changing relational databases may lead to downtime and without a specialist is difficult to know when.","The idea was to follow the backward compatibility and have no downtime.","Database migration and data store splitting;Dealing with data consistency;Communication among services;Decoupling services from the monolith;Service orchestration;Continuous deployment/integration;Effort estimation;Expected long-term return on investment (ROI);Ensuring reliability","Mostly using regression tests.","Maintainability;Performance, Efficiency;Business-related indicators;Availability","The business is the most crucial part.","Throughput, business process metrics, errors","Development;Staging","Functional tests;Simulation"
"2023/01/09 2:57:31 da tarde CET","Software Development;Software Architecture","Tech Lead","Brazil","5","2","Finance","> 1M","50 â€“ 200","Web resources, blogs;External consulting;Internal consulting","Continuous refactoring interspersed with product evolution","Very likely","Neutral","Likely","Likely","Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design);Based on lexical similarity (e.g., joining in the same service API endpoints with similar names)","Yes","JMeter for stress test","","Refactoring code;Regression testing;Planning and managing the refactoring process;Microservice API design;Stress Test","Ease of use;Versatility â€“ usable via command line, within IDEs, independently, etc.;Doing the refactoring quickly;Having successful case studies reported","Strongly Agree","Agree","Neutral","Strongly Agree","Agree","Neutral","Agree","Parallel Run as step of","Lack of knowledge and experience of the team","Neutral","Agree","Agree","Agree","Neutral","Neutral","Neutral","Agree","Disagree","","Align the development team, with the DBA","","Database migration and data store splitting;Effort estimation;Team organization","No, unfortunately for not being involved in the post decomposition","Performance, Efficiency;Scalability","","I use the throughput (e.g., requests per second) to measure the efficiency.","Development;Production","Functional tests"
"2023/01/09 4:04:03 da tarde CET","Teaching;Scientific Research","Postdoc researcher","Austria/Brazil","5","1","Manufacturing","< 100","10 â€“ 50","Scientific articles;Books;Other practitioners' experiences","Stop product evolution, refactor the system to microservices, and then proceed with evolving the product;Continuous refactoring interspersed with product evolution","Likely","Very likely","Likely","Very likely","Decomposition by business capability (i.e., so that the decomposition reflects the structure of the organization, its teams and business units);Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design);Based on coupling and cohesion of the business logic of the monolith (i.e., keep strongly-coupled elements of the implementation in the same services);Based on coupling and cohesion of the data owned by the monolith (i.e., keep strongly-coupled data entities managed by the same services);Network overhead, opportunities for reuse","Yes","toMicroservices","multi-criteria search-based","Deciding services boundaries;Refactoring code;Evaluating a decomposition result;Analysis of organizational restructuring needs (team size, team organization, etc.);Microservice API design","Ease of use;Versatility â€“ usable via command line, within IDEs, independently, etc.;Support for various programming languages;Having successful case studies reported;Ability to apply restrictions to the decomposition result;Multiple decompositions alternatives;Edit/model a candidate decomposition;Provide comprehensive decomposition guidance","Agree","Neutral","Neutral","Disagree","Disagree","Disagree","Neutral","","","Disagree","Disagree","Disagree","Agree","Agree","Neutral","Neutral","Neutral","Neutral","","","","Database migration and data store splitting;Decoupling services from the monolith","We evaluated only the architecture, the migration was not done yet","Maintainability;Performance, Efficiency;Business-related indicators;Reusability","To make sure the microservices fit developers/business needs","Size of objects used as parameters in the legacy, static and dynamic coupling","Development","Functional tests"
"2023/01/09 5:03:26 da tarde CET","Software Development;Software Architecture;Operations;Quality assurance;Product Management;Coaching","SENIOR engenheiro software","Brazil","7","5","Healthcare;Finance;Security;Insurance","100K â€“ 1M","< 10","Books;Conference presentations;Web resources, blogs;Other practitioners' experiences;External consulting;Internal consulting;Cursos","Rewrite/rebuild the entire system from scratch;Stop product evolution, refactor the system to microservices, and then proceed with evolving the product;Entendimento da solucao atual e conversar com usuarios para priorizacao e mvp","Unlikely","Very likely","Neutral","Very likely","Decomposition by business capability (i.e., so that the decomposition reflects the structure of the organization, its teams and business units);Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design);Based on lexical similarity (e.g., joining in the same service API endpoints with similar names)","No","","","Understanding the monolith;Deciding services boundaries;Analysis of organizational restructuring needs (team size, team organization, etc.);Planning and managing the refactoring process;Microservice API design","Versatility â€“ usable via command line, within IDEs, independently, etc.;Support for various programming languages;Requiring minimal manual inputs;Having successful case studies reported;Ability to apply restrictions to the decomposition result;Provide a visualization of candidate decompositions;Provide comprehensive decomposition guidance;Provide an analysis of the changes of quality attributes and metrics","Agree","Agree","Agree","Strongly Agree","Agree","Agree","Agree","Figo, com captura de dados e composicoes ui","O entendimento do negÃ³cio para garantir suas funcionalidades, nem sempre a migraÃ§Ã£o anda sem evoluÃ§Ã£o dos requisitos","Strongly Agree","Agree","Agree","Neutral","Strongly Agree","Neutral","Neutral","Strongly Agree","Strongly Disagree","VirtualizaÃ§Ã£o e migraÃ§Ã£o para dados nÃ£o relacionais de acordo com o caso  ser resolvido","Limpeza de dados... como segregar .. hj usamos data driven que ajuda nesta migracao","Desenhos da nova arquitetura... definiÃ§Ã£o de fronteiras.. data mesh","Dealing with data consistency;Communication among services;Decoupling services from the monolith;Service orchestration;Continuous deployment/integration;Expected long-term return on investment (ROI);Ensuring reliability;Ensuring scalability;Ensuring security","Sim observability","Performance, Efficiency;Business-related indicators;Reusability;Team Agility","SatisfaÃ§Ã£o com reduÃ§Ã£o de custos","Tempo de entrega","Development;Staging;Production","Functional tests;Simulation;Production"
"2023/01/09 6:38:15 da tarde CET","Software Development","Gerente de Sistemas de InformaÃ§Ã£o","Brasil","3","3","Finance","100K â€“ 1M","10 â€“ 50","Web resources, blogs;Other practitioners' experiences;External consulting;Internal consulting","Continuous refactoring interspersed with product evolution","Likely","Likely","Likely","Likely","Decomposition by business capability (i.e., so that the decomposition reflects the structure of the organization, its teams and business units);Based on lexical similarity (e.g., joining in the same service API endpoints with similar names)","No","","","Deciding services boundaries;Refactoring code;Evaluating a decomposition result;Deployment automation;Microservice API design","Ease of use;Support for various programming languages;Doing the refactoring quickly;Being actively maintained;Having successful case studies reported;Provide an analysis of the changes of quality attributes and metrics","Strongly Agree","Agree","Agree","Agree","Neutral","Neutral","Agree","Strangler Fig Application and UI Composition are more common. We use as a step of","in a large and heavily used system, reconciling the demands of business evolution with the requirements of architecture migration is the biggest challenge","Strongly Agree","Agree","Neutral","Neutral","Agree","Neutral","Agree","Agree","Neutral","Database Wrapping Service, Tracer write and database view. In our environment, where we have several legacy systems that consume the same information, we commonly use tracker write","Different legacy systems, developed in different technologies, consuming the same information. This makes monolith migration more complex.","For each migrated service we evaluate the type of compatibility that we must maintain. Each scenario requires a type of communication that can be synchronous or asynchronous. In many cases that support asynchronous communication, we also use message queuing tools as a way to have shorter transactions","Database migration and data store splitting;Dealing with data consistency;Service orchestration;Infrastructure to support microservices;Ensuring reliability;Ensuring scalability;Ensuring security","Tracking application quality attributes such as execution time and number of errors","Performance, Efficiency;Business-related indicators;Scalability;Availability","because they are attributes that allow me to compare whether a new application is behaving more efficiently than the previous one","We have tools for monitoring the production environment where we collect various data from the application at runtime. We know when a transaction starts, how long it took to execute and if there are any errors or business critical issues. With this information we have statistical reports where we can verify the quality of services","Staging","Functional tests"
"2023/01/09 6:50:53 da tarde CET","Software Development","Software Engineer","Brazil","1","1","Finance;Education","1K â€“ 10K","10 â€“ 50","Scientific articles;Books;Web resources, blogs;Other practitioners' experiences","Stop product evolution, refactor the system to microservices, and then proceed with evolving the product","Very likely","Very unlikely","Very unlikely","Very likely","Decomposition by business capability (i.e., so that the decomposition reflects the structure of the organization, its teams and business units);Based on coupling and cohesion of the data owned by the monolith (i.e., keep strongly-coupled data entities managed by the same services)","No","","","Understanding the monolith;Refactoring code;Evaluating a decomposition result;Planning and managing the refactoring process;Microservice API design","Ease of use;Versatility â€“ usable via command line, within IDEs, independently, etc.;Doing the refactoring quickly;Having successful case studies reported;Multiple decompositions alternatives;Provide an explanation of candidate decompositions;Provide an analysis of the changes of quality attributes and metrics","Neutral","Neutral","Strongly Agree","Strongly Agree","Disagree","Neutral","Strongly Agree","","","Neutral","Neutral","Strongly Agree","Neutral","Neutral","Strongly Agree","Strongly Agree","Neutral","Neutral","","","","Database migration and data store splitting;Communication among services;Ensuring code maintainability;Service orchestration;Microservices statefulness;Continuous deployment/integration;Team organization;Infrastructure to support microservices;Selecting infrastructure patterns","I use regression testing","Maintainability;Performance, Efficiency;Security;Scalability","","Performance, security and scalability","Development","Functional tests;Simulation"
"2023/01/09 8:23:56 da tarde CET","Software Development;Software Architecture;Product Management;Teaching;Scientific Research","Professor","Brazil","4","2","Healthcare;Education","100 â€“ 1K","< 10","Scientific articles;Books;Internal consulting","Stop product evolution, refactor the system to microservices, and then proceed with evolving the product","Neutral","Unlikely","Very likely","Very likely","Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design)","No","","","Understanding the monolith;Deciding services boundaries;Evaluating a decomposition result;Planning and managing the refactoring process","Ease of use;Support for various programming languages;Provide an explanation of candidate decompositions;Provide a visualization of candidate decompositions;Edit/model a candidate decomposition;having a large and detailed documentation","Strongly Agree","Strongly Agree","Disagree","Agree","Agree","Disagree","Neutral","Strangler Fig with UI Composition and Strangler Fig before Decorating Collaborator","team work and constantly update process planning","Agree","Neutral","Disagree","Disagree","Strongly Agree","Strongly Agree","Strongly Agree","Strongly Agree","Disagree","Split table as a step of Change Data Ownership","synchronization of data and maintenance of query efficiency","Feature oriented domain analysis","Database migration and data store splitting;Dealing with data consistency;Communication among services;Service orchestration;Effort estimation;Team organization;Ensuring reliability;Ensuring security","Using reuse and maintainability metrics","Maintainability;Reusability;Team Agility","","Reuse cost-benefits models and some raw metrics to measure orchestration complexity","Development","Functional tests"
"2023/01/10 9:01:08 da manhÃ£ CET","Software Development;Software Architecture","Architect","India","8","6","Retail;Travel and Tourism;Ratings and Review","10K â€“ 100K","< 10","Scientific articles;Conference presentations;Web resources, blogs","Stop product evolution, refactor the system to microservices, and then proceed with evolving the product","Very likely","Likely","Likely","Very likely","Decomposition by business capability (i.e., so that the decomposition reflects the structure of the organization, its teams and business units);Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design);Based on coupling and cohesion of the data owned by the monolith (i.e., keep strongly-coupled data entities managed by the same services);Based on lexical similarity (e.g., joining in the same service API endpoints with similar names)","Yes","AWS Data Management Service","Data migration tools","Microservice API design","Ease of use;Requiring minimal manual inputs","Neutral","Neutral","Agree","Agree","Strongly Agree","Neutral","Strongly Agree","Decorating collaborator and change code dependency to service call","Deployment of new microservices to replace the modules in monolith and request tracing","Neutral","Strongly Agree","Agree","Neutral","Agree","Neutral","Agree","Neutral","Disagree","Database Wrapping Service before Change Data Ownership","Maintaining the source of truth, transaction boundaries of monolith service and microservice. ","Database sharding and replicas.Placing these shards and replicas in multiple nodes for fault tolerance. ","Database migration and data store splitting;Dealing with data consistency;Communication among services;Ensuring code maintainability;Decoupling services from the monolith;Service orchestration;Microservices statefulness;Expected long-term return on investment (ROI);Ensuring reliability","Yes. On scalability, performance, source code maintenance, each service's ownership and usage","Maintainability;Security;Scalability;Team Agility","Microservice architecture provides freedom to individual service on scalability, source code maintenance and distributed responsibility of different services across multiple teams in organization. ","Response time, database query response time, requests per second, data payload in request and response","Staging;Production","Functional tests;Production"
"2023/01/10 3:57:35 da tarde CET","Software Development;Software Architecture;Operations","Senior Developer","Brasil","2","0","Finance","1K â€“ 10K","< 10","Web resources, blogs;Other practitioners' experiences","Stop product evolution, refactor the system to microservices, and then proceed with evolving the product","Likely","Likely","Neutral","Neutral","Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design);Based on coupling and cohesion of the data owned by the monolith (i.e., keep strongly-coupled data entities managed by the same services)","No","","","Deciding services boundaries;Refactoring code;Evaluating a decomposition result;Regression testing;Microservice API design","Versatility â€“ usable via command line, within IDEs, independently, etc.;Support for various programming languages;Requiring minimal manual inputs;Being actively maintained;Easy modifications on restrictions without having to start over;Multiple decompositions alternatives;Provide a visualization of candidate decompositions;Edit/model a candidate decomposition","Neutral","Agree","Disagree","Agree","Disagree","Neutral","Agree","Change code dependency to service call and UI Composition ","","Agree","Neutral","Agree","Neutral","Neutral","Disagree","Neutral","Neutral","Agree","","","","Database migration and data store splitting;Dealing with data consistency;Decoupling services from the monolith;Service orchestration;Multitenancy;Microservices statefulness;Effort estimation;Team organization;Infrastructure to support microservices","Yes. Bug/Failure/Error tracing.","Maintainability;Performance, Efficiency;Scalability;Availability","",".","Development;Staging","Simulation;Production"
"2023/01/10 6:53:08 da tarde CET","Software Development;Software Architecture","Architect","Brazil","5","4","Finance;Retail;Marketplace","> 1M","10 â€“ 50","Books;Conference presentations;Web resources, blogs;Other practitioners' experiences","Continuous refactoring interspersed with product evolution;Evolution already made in microservice","Neutral","Neutral","Likely","Very likely","Decomposition by business capability (i.e., so that the decomposition reflects the structure of the organization, its teams and business units);Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design)","No","","","Refactoring code;Evaluating a decomposition result;Regression testing","Ease of use;Versatility â€“ usable via command line, within IDEs, independently, etc.;Support for various programming languages;Having successful case studies reported;Multiple decompositions alternatives;Provide an explanation of candidate decompositions;Provide a visualization of candidate decompositions;Provide an analysis of the changes of quality attributes and metrics","Agree","Neutral","Neutral","Agree","Neutral","Strongly Agree","Agree","Strangler Fig and Parallel Run. Step of evolution.","Business Knowledge","Agree","Agree","Disagree","Disagree","Neutral","Neutral","Disagree","Disagree","Disagree","","","N/A","Database migration and data store splitting;Dealing with data consistency;Communication among services;Decoupling services from the monolith;Service orchestration;Team organization;Infrastructure to support microservices;Ensuring reliability;Ensuring security","Yes. Delivery, indicators, metrics, time to market, agility","Maintainability;Performance, Efficiency;Business-related indicators;Team Agility","","Number of critical production incidents, Availability, team delivery","Staging;Production","Functional tests;Production"
"2023/01/10 7:16:33 da tarde CET","Software Development;Software Architecture","Senior Developer and Architect","Brazil","6","3","Finance;Education","100 â€“ 1K","10 â€“ 50","Scientific articles;Books;Conference presentations;Web resources, blogs","Stop product evolution, refactor the system to microservices, and then proceed with evolving the product;Continuous refactoring interspersed with product evolution","Likely","Neutral","Neutral","Likely","Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design);Based on coupling and cohesion of the business logic of the monolith (i.e., keep strongly-coupled elements of the implementation in the same services)","Yes","General alert monitoring tools (Prometheus), orchestration (from deployment, management and scalability - OpenShift) and APM (Dynatrace)","from deployment, management and scalability","Analysis of organizational restructuring needs (team size, team organization, etc.);Planning and managing the refactoring process","Versatility â€“ usable via command line, within IDEs, independently, etc.;Support for various programming languages;Provide an explanation of candidate decompositions;Provide comprehensive decomposition guidance","Neutral","Agree","Agree","Neutral","Neutral","Neutral","Agree","UI Composition + Change code dependency to service call","Find out where each boundary of a microservice that runs directly or intuitively in the data visualization layer begins and ends.","Disagree","Disagree","Disagree","Neutral","Disagree","Disagree","Neutral","Disagree","Disagree","It is part of each stage of migration of the functionalities that will compose the new product","Data synchronization between the monolith of possible data segregation due to writing microservices in migration stages","Experience and experiences of people lived in the subject","Database migration and data store splitting;Communication among services;Ensuring code maintainability;Service orchestration;Multitenancy;Ensuring reliability;Ensuring scalability;Ensuring security","Sometimes making a matrix comparison between the features of the monolithic with the services exposed separately","Performance, Efficiency;Reusability;Security;Scalability","The migrations I worked on in short were to optimize the customer's product for which reuse, security and scalability were essential as non-functional requirements of each decomposition. Therefore, performance and mainly efficiency were demanded to the maximum","Efficiency rate that was measured in execution numbers, time and number of errors (non-business errors) per second","Staging;Production","Functional tests;Simulation;Production"
"2023/01/10 8:48:24 da tarde CET","Software Development;Software Architecture","Senior Developer","Brasil","5","3","Finance","100 â€“ 1K","10 â€“ 50","Web resources, blogs;Other practitioners' experiences;Internal consulting","Continuous refactoring interspersed with product evolution","Neutral","Neutral","Unlikely","Very likely","Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design)","No","","","Refactoring code;Evaluating a decomposition result;Deployment automation;Microservice API design","Ease of use;Being actively maintained;Easy modifications on restrictions without having to start over;Multiple decompositions alternatives;Provide an explanation of candidate decompositions;Provide a visualization of candidate decompositions;Edit/model a candidate decomposition;Provide comprehensive decomposition guidance","Strongly Agree","Neutral","Disagree","Agree","Disagree","Disagree","Agree","As a step of","The constant change of the monolith, forcing changes in the techniques used.","Neutral","Agree","Disagree","Neutral","Disagree","Disagree","Agree","Agree","Strongly Disagree","Synchronize Data in Application as a step of Tracer Write","Changes to the database can cause unavailability and add complexity to development.","","Database migration and data store splitting;Dealing with data consistency;Ensuring code maintainability;Decoupling services from the monolith;Infrastructure to support microservices;Selecting infrastructure patterns;Ensuring reliability;Ensuring scalability;Ensuring security","Sometimes. Through the expected result in the database.","Performance, Efficiency;Reusability;Security;Availability","In this way we can assess whether the process has been defined correctly.","NÃ³s avaliamos a performance sem que perca a seguranÃ§a e disponibilidade.","Development","Simulation"
"2023/01/11 8:36:23 da manhÃ£ CET","Software Development;Software Architecture","Software Developer (titles are meaningless)","Finland","3","2","Electricity (utilities) metering, transportation","1K â€“ 10K","10 â€“ 50","Scientific articles;Conference presentations;Web resources, blogs;Other practitioners' experiences;Internal consulting;Trying things out/figuring things out","Rewrite/rebuild the entire system from scratch;Stop product evolution, refactor the system to microservices, and then proceed with evolving the product;Continuous refactoring interspersed with product evolution;This really depends on the system/organization/circumstances. There is no single right way of doing this. First you should make sure you really really need to go with microservices.","Neutral","Likely","Neutral","Likely","Decomposition by business capability (i.e., so that the decomposition reflects the structure of the organization, its teams and business units);Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design);Based on coupling and cohesion of the data owned by the monolith (i.e., keep strongly-coupled data entities managed by the same services)","No","","","Regression testing","Ease of use","Strongly Agree","Neutral","Agree","Neutral","Agree","Disagree","Disagree","Strangler Fig and Branch by Abstraction","Tight coupling in existing monolith might make it challenging to extract functionalities. The extraction process easily snowballs into a bigger undertaking.","Neutral","Agree","Agree","Disagree","Neutral","Strongly Agree","Disagree","Neutral","Agree","","The existing monolith performance might degrade when moving data around and adding service calls. Using multiple  data sources easily introduces distributed transactions which can be tricky to handle correctly.","","Database migration and data store splitting;Dealing with data consistency;Microservices statefulness;Infrastructure to support microservices","Performance testing","Maintainability;Performance, Efficiency;Deployability","Microservice should be independently deployable","Maintainability can be evaluated by reading the code, throughput for performance","Development;Staging;Production","Functional tests;Simulation"
"2023/01/11 3:40:09 da tarde CET","Software Architecture;Teaching;Scientific Research","Associate Professor","Brazil","3","1","Oil and Gas","< 100","< 10","Scientific articles;Books;Conference presentations;Other practitioners' experiences","Stop product evolution, refactor the system to microservices, and then proceed with evolving the product","Very likely","Very likely","Likely","Very likely","Decomposition by business capability (i.e., so that the decomposition reflects the structure of the organization, its teams and business units);Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design);Based on coupling and cohesion of the business logic of the monolith (i.e., keep strongly-coupled elements of the implementation in the same services)","Yes","We have used our own tool named toMicroservices, which was developed to identify the microservice candidates from the legacy code.","","Deciding services boundaries;Evaluating a decomposition result;Regression testing;Planning and managing the refactoring process;Microservice API design","Ease of use;Versatility â€“ usable via command line, within IDEs, independently, etc.;Multiple decompositions alternatives;Provide an explanation of candidate decompositions;Provide a visualization of candidate decompositions;Edit/model a candidate decomposition;Provide comprehensive decomposition guidance;Provide an analysis of the changes of quality attributes and metrics","Strongly Agree","Strongly Agree","Agree","Neutral","Agree","Neutral","Neutral","As my role was only in the identification of the microservice candidates, I did not apply any of these techniques. So IÂ´m not able to answer this question.","As my role was only in the identification of the microservice candidates, I did not apply any of these techniques. So IÂ´m not able to answer this question.","Neutral","Neutral","Neutral","Neutral","Neutral","Neutral","Neutral","Neutral","Neutral","As my role was only in the identification of the microservice candidates, I did not apply any of these techniques. So IÂ´m not able to answer this question.","As my role was only in the identification of the microservice candidates, I did not apply any of these techniques. So IÂ´m not able to answer this question.","As I mentioned before, I have not been involved in the migration process in fact as I participated only in the beginning of the process (understanding the monolith, identifying the alternatives of decomposition and the microservices interfaces).","Dealing with data consistency;Communication among services;Decoupling services from the monolith;Multitenancy;Microservices statefulness;Effort estimation;Expected long-term return on investment (ROI)","We estimate the result of decomposition candidates using software metrics related to coupling, cohesion, network overhead, feature modularization, reusability, which might be useful to predict some quality attributes.","Performance, Efficiency;Business-related indicators;Reusability;Scalability","","Coupling, cohesion and feature modularization to measure maintainibility.
Network overhead to measure performance.
Reusability can be measured by the number of tenants or external services that use an specific service.","Development","Simulation"
"2023/01/11 8:27:01 da tarde CET","Software Development;Software Architecture;Coaching;Scientific Research","Consultant","Brazil","7","1","Finance","> 1M","50 â€“ 200","Books;Conference presentations;Web resources, blogs;External consulting","Continuous refactoring interspersed with product evolution","Likely","Neutral","Likely","Very likely","Decomposition by business capability (i.e., so that the decomposition reflects the structure of the organization, its teams and business units);Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design);Based on coupling and cohesion of the business logic of the monolith (i.e., keep strongly-coupled elements of the implementation in the same services);Based on coupling and cohesion of the data owned by the monolith (i.e., keep strongly-coupled data entities managed by the same services)","Yes","We developed our own scripts to analyze source code and repository activities","We developed our own tools using Python and shell scripts","Understanding the monolith;Deciding services boundaries;Planning and managing the refactoring process","Versatility â€“ usable via command line, within IDEs, independently, etc.;Support for various programming languages;Being actively maintained;Having successful case studies reported;Easy modifications on restrictions without having to start over;Multiple decompositions alternatives;Provide a visualization of candidate decompositions;Provide an analysis of the changes of quality attributes and metrics","Strongly Agree","Strongly Agree","Strongly Agree","Strongly Agree","Strongly Agree","Strongly Agree","Strongly Agree","Strangler Fig as an approach to all others described here. Branch by Abstraction as a step of Parallel Run. Change Data Capture as an alternative to Decorating Collaborator (when the latter was impossible or too costly). Change code dependency to service call as a step of Branch by Abstraction. UI Composition as a step of Strangler Fig.","Creating tests for the legacy application to ensure that the changes do not break legacy code. Training developers to select and apply those techniques properly. Tooling for monitoring the code base (to compare activity on the old and new platforms).","Agree","Strongly Agree","Agree","Strongly Agree","Strongly Agree","Agree","Strongly Agree","Strongly Agree","Strongly Agree","Aggregate Exposing the Monolith in parallel with Change Data Ownership (one for each part of the data). Move FK Relationship to Code as a step of Split Table. Synchronize Data in Application before Split Table. Database View as a step of Database-as-a-Service Interface.","Tooling for migrating data and monitoring consistency. ","I would highlight some patterns related to managing the migration process. Keep Improving the Legacy System. New Functionality Goes Into the New Architecture. Restrict Changes to the Legacy System. Also, some of the Strangler Patterns [Yoder and Merson].","Dealing with data consistency;Communication among services;Decoupling services from the monolith;Service orchestration;Microservices statefulness;Effort estimation;Infrastructure to support microservices;Ensuring reliability;Cost increase (more services, more infrastructure)","Yes. By establishing metrics, including reliability and DORA metrics (deployment frequency, lead time for changes, mean time to recovery, and change failure rate), source code analysis (static and dynamic), agility metrics (lead time, throughput), and repository activity metrics.","Maintainability;Business-related indicators;Availability;Team Agility","I believe these metrics reflect most of the issues that lead to a migration from monolith to microservices in the first place.","Maintainability: lead time to create and evolve features, defect rate. Business-related indicators: lead time to new features. Availability: Apdex (average response time and % of requests satisfied). Team Agility: lead time, throughput for changes.","Development;Staging;Production","Functional tests;Production"
"2023/01/11 11:59:14 da tarde CET","Software Development;Software Architecture;Quality assurance;Product Management","Senior Developer and Architect","Brazil","5","14","Finance;Security;Supply Chain Management;Government ","> 1M","< 10","Scientific articles;Books;Web resources, blogs;Other practitioners' experiences;Documentation from technology providers","Identify the independent software modules, which can be isolated to migrate the smallest possible part, with the lowest business impact.","Unlikely","Unlikely","Likely","Very likely","Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design);Based on coupling and cohesion of the business logic of the monolith (i.e., keep strongly-coupled elements of the implementation in the same services);I identify data from the structure of the business (static data) and operational data that represent the dynamics of the business. Then I modularize such data segments into organizational subgroups (administration, purchasing, finance, accounting, etc.)","Yes","Automated Acceptance Testing in Jenkins - Used to ensure the business process remains consistent.","Automated Acceptance Testing in Jenkins","Understanding the monolith;Deciding services boundaries;Refactoring code;Microservice API design;Map the direct link between which services in the monolith are related to services in microservices.","Ease of use;Versatility â€“ usable via command line, within IDEs, independently, etc.;Support for various programming languages;Being actively maintained;Having successful case studies reported;Multiple decompositions alternatives;Edit/model a candidate decomposition;Allow modeling and simulation before implementing.","Strongly Agree","Agree","Disagree","Neutral","Neutral","Neutral","Disagree","Strangler Fig Application and UI Composition ","Identify the functional business units, document them as executed in the monolith and model them in microservices so that they deliver the same business results.","Agree","Neutral","Agree","Agree","Neutral","Disagree","Disagree","Neutral","Disagree","Database View and Aggregate Exposing the Monolith","Load the data before migrating to the new database structure.","Clean Architecture and BDD","Database migration and data store splitting;Dealing with data consistency;Effort estimation;Expected long-term return on investment (ROI);Team organization;Ensuring reliability;Ensuring scalability;Ensuring security;Scale refactoring boundaries","Using Automated Acceptance Tests, run by DevOps orchestrators, both on the monolith and microservice.","Maintainability;Security;Scalability;Availability","Continuous Improvement and High Availability.","Technical errors for business operations, and technical errors for successful business operations.","Development;Staging;Production","Functional tests;Simulation"
"2023/01/12 1:13:24 da tarde CET","Operations;Teaching;Infrastructure","Infrastructure analyst","Brazil","1","2","Education;Real Estate","> 1M","10 â€“ 50","Scientific articles;Conference presentations;Web resources, blogs;Other practitioners' experiences;External consulting;Internal consulting","Rewrite/rebuild the entire system from scratch;Continuous refactoring interspersed with product evolution","Neutral","Neutral","Likely","Likely","Decomposition by business capability (i.e., so that the decomposition reflects the structure of the organization, its teams and business units);Based on coupling and cohesion of the business logic of the monolith (i.e., keep strongly-coupled elements of the implementation in the same services);Based on coupling and cohesion of the data owned by the monolith (i.e., keep strongly-coupled data entities managed by the same services)","No","","","Deciding services boundaries;Refactoring code;Regression testing;Planning and managing the refactoring process;Microservice API design","Ease of use;Requiring minimal manual inputs;Being actively maintained;Having successful case studies reported;Easy modifications on restrictions without having to start over","Agree","Agree","Agree","Agree","Agree","Agree","Agree","We used the Strangler Fig Application, Parallel Run and Decorating Collaborat techniques as a step in the process.","Apply the techniques as correctly as possible.","Agree","Agree","Agree","Agree","Agree","Agree","Agree","Agree","Agree","There was no need to decompose the database.","","","Communication among services;Decoupling services from the monolith;Service orchestration;Effort estimation;Infrastructure to support microservices;Selecting infrastructure patterns;Ensuring reliability;Ensuring scalability;Ensuring security","I did not perform a decomposition assessment.","Reusability;Security;Scalability;Availability","","So far we have not carried out quality measurements.","Development;Staging","Functional tests;Simulation;Production"
"2023/01/12 2:26:35 da tarde CET","Software Development;Software Architecture","Architect ","India","5","4","Finance;Security","1K â€“ 10K","50 â€“ 200","Books;Web resources, blogs;","Identification of component and decomposeo","Neutral","Likely","Very likely","Very likely","Decomposition by business capability (i.e., so that the decomposition reflects the structure of the organization, its teams and business units);Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design)","Yes","Jenkins,Travis and dynatrace ( ci/cm)","Jenkins and openshift deployment features ","Deciding services boundaries;Evaluating a decomposition result;Regression testing;Planning and managing the refactoring process","Ease of use;Versatility â€“ usable via command line, within IDEs, independently, etc.;Support for various programming languages;Requiring minimal manual inputs;Doing the refactoring quickly;Being actively maintained;Easy modifications on restrictions without having to start over;Multiple decompositions alternatives","Strongly Agree","Agree","Agree","Agree","Neutral","Agree","Agree","Strangler fit","","Agree","Agree","Agree","Agree","Agree","Agree","Agree","Agree","Agree","Database view","","","Database migration and data store splitting;Dealing with data consistency;Communication among services;Ensuring code maintainability;Decoupling services from the monolith;Infrastructure to support microservices","Yes. With test cases","Maintainability;Performance, Efficiency;Security;Availability","","Through put and customize by team","Development","Functional tests"
"2023/01/12 2:39:28 da tarde CET","Software Development","Senior Developer","Brazil","2","1","Credit Granting","> 1M","10 â€“ 50","Scientific articles;Books;Web resources, blogs","Continuous refactoring interspersed with product evolution","Very likely","Likely","Likely","Very likely","Decomposition by business capability (i.e., so that the decomposition reflects the structure of the organization, its teams and business units)","Yes","Dependency Analysis: SchemaSpy And Structure101.","Dependency Analysis","Deciding services boundaries;Deployment automation;Analysis of organizational restructuring needs (team size, team organization, etc.);Planning and managing the refactoring process;Microservice API design","Ease of use;Versatility â€“ usable via command line, within IDEs, independently, etc.;Support for various programming languages;Having successful case studies reported;Multiple decompositions alternatives;Edit/model a candidate decomposition;Provide comprehensive decomposition guidance","Strongly Agree","Neutral","Disagree","Agree","Disagree","Disagree","Agree","Strangler Fig Application - Migration, Parallel Run - Tests And Change Code Dependency to Service Call - Migration","How to apply each technique in detail.","Disagree","Disagree","Agree","Neutral","Agree","Agree","Agree","Neutral","Neutral","","","","Database migration and data store splitting;Dealing with data consistency;Communication among services;Service orchestration;Continuous deployment/integration;Team organization;Infrastructure to support microservices;Ensuring scalability;Ensuring security","I see 3 quality attributes: Maintainability, Scalability and Business-related indicators.","Maintainability;Business-related indicators;Scalability","","I use the time to fix a bug and the number of class changeds. I use the throughput (requests per second).","Development;Staging","Functional tests;Simulation"
"2023/01/12 3:11:44 da tarde CET","Software Development;Software Architecture;Coaching","Senior fullstack developer","Italy","3","1","Security;Manufacturing","100K â€“ 1M","< 10","Books;Web resources, blogs","Rewrite/rebuild the entire system from scratch","Very unlikely","Very unlikely","Very unlikely","Very likely","Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design)","No","","","Refactoring code;Deployment automation","Support for various programming languages;Being actively maintained;Multiple decompositions alternatives","Strongly Disagree","Strongly Disagree","Strongly Disagree","Strongly Agree","Strongly Disagree","Strongly Agree","Agree","","","Strongly Agree","Neutral","Strongly Agree","Strongly Disagree","Strongly Disagree","Strongly Disagree","Strongly Disagree","Strongly Disagree","Strongly Disagree","","","","Communication among services;Ensuring code maintainability;Multitenancy;Continuous deployment/integration;Team organization;Ensuring scalability;Ensuring security","no","Performance, Efficiency;Reusability;Security;Scalability","","nope","Development","Simulation"
"2023/01/12 5:34:29 da tarde CET","Software Development;Software Architecture","Senior Software Developer","Portugal","4","10","Supply Chain Management","< 100","< 10","Scientific articles;Books;Web resources, blogs;Other practitioners' experiences","Continuous refactoring interspersed with product evolution","Neutral","Likely","Very likely","Likely","Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design)","No","","","Deciding services boundaries;Refactoring code;Regression testing","Ease of use;Support for various programming languages;Having successful case studies reported;Ability to apply restrictions to the decomposition result;Provide an explanation of candidate decompositions;Provide a visualization of candidate decompositions;Edit/model a candidate decomposition;Provide comprehensive decomposition guidance","Strongly Agree","Strongly Agree","Strongly Agree","Neutral","Neutral","Neutral","Disagree","Strangler Fig Application is our go to pattern. We implement the logic in the new service and then we make sure that we are able to call directly this new service or make the old service call the new one.","Making sure that the product always available and that the impact for the end-user is almost non-existing","Neutral","Neutral","Neutral","Neutral","Strongly Agree","Neutral","Neutral","Neutral","Neutral","The pattern of Chaging the data ownership is a recurrent pattern applied when migrating to microservices. ","When migrating the source of truth for a new service, the deployment period is extremely important. We often run queries to check missing data when changing the owner of the database and migrate missing data that may be introduced during the deployment period","","Database migration and data store splitting;Communication among services;Decoupling services from the monolith;Multitenancy;Ensuring reliability","Not really. If the process went according to plan we close the topic. If something fails we do a post mortem to take actions in future migrations","Maintainability;Performance, Efficiency;Scalability;Availability","We need to make sure we actually improved the system instead of just migrating to a new microservices just for the sake of migrating to a new service","Most of our migrations were made to ease the development process and performance.","Staging;Production","Simulation;Production"
"2023/01/12 8:19:10 da tarde CET","Software Development;Software Architecture;Operations;Product Management;Coaching","VP/CTO, etc","US","8","3","Healthcare","10K â€“ 100K","< 10","Books;Web resources, blogs;Other practitioners' experiences","Stop product evolution, refactor the system to microservices, and then proceed with evolving the product;Continuous refactoring interspersed with product evolution","Very unlikely","Very unlikely","Likely","Likely","Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design);Based on coupling and cohesion of the business logic of the monolith (i.e., keep strongly-coupled elements of the implementation in the same services);Based on coupling and cohesion of the data owned by the monolith (i.e., keep strongly-coupled data entities managed by the same services)","No","","","Refactoring code;Regression testing;Deployment automation;Microservice API design","Requiring minimal manual inputs;Being actively maintained;Provide a visualization of candidate decompositions;Edit/model a candidate decomposition","Strongly Agree","Agree","Neutral","Neutral","Strongly Agree","Neutral","Neutral","strangler or decorator - strangler if we think we can do it in a couple of sprints","coupling - older systems have crazy levels of coupling and can make any technique difficult","Strongly Agree","Strongly Agree","Strongly Agree","Strongly Disagree","Strongly Agree","Disagree","Disagree","Strongly Agree","Strongly Disagree","I don't know that we've ever used together","organizational inertia; technical debt ","Start with orchestration services and migrate the orch. service to use micro-s","Decoupling services from the monolith;Service orchestration;Team organization","Not generally","Maintainability;Scalability","If the software is maintainable, the other quality attributes can be added; scalability has to do with responsiveness to changing user needs
","visual inspection; afferent and efferent coupling; domain more abstract (inspection); scalability - how many and how quick can I launch services; transaction rates for core services","Development","Functional tests"
"2023/01/13 2:18:19 da manhÃ£ CET","Software Development;Software Architecture;Quality assurance","Systems Analyst Chief","PERU","3","2","Education","< 100","10 â€“ 50","Books;Conference presentations;Web resources, blogs","Stop product evolution, refactor the system to microservices, and then proceed with evolving the product","Very likely","Likely","Likely","Likely","Decomposition by business capability (i.e., so that the decomposition reflects the structure of the organization, its teams and business units);Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design);Based on coupling and cohesion of the data owned by the monolith (i.e., keep strongly-coupled data entities managed by the same services)","Yes","Automated pipeline for quality assurance.","SonarQube, Selenium & jMeter","Deciding services boundaries;Evaluating a decomposition result;Deployment automation;Microservice API design","Versatility â€“ usable via command line, within IDEs, independently, etc.;Doing the refactoring quickly;Multiple decompositions alternatives;Edit/model a candidate decomposition","Agree","Strongly Agree","Agree","Agree","Strongly Agree","Strongly Agree","Strongly Agree","UI Composition and Decorating Collaborator","Understand the correct application.","Strongly Agree","Agree","Strongly Agree","Neutral","Agree","Strongly Agree","Agree","Agree","Strongly Agree","Database-as-a-Service Interface AND Synchronize Data in Application AND Split Table","Understand the correct application of techniques.","DDD and Hexagonal","Database migration and data store splitting;Communication among services;Multitenancy;Microservices statefulness;Ensuring reliability;Ensuring scalability;Ensuring security","Using DDD and Hexagonal.","Maintainability;Security;Scalability;Availability","Because I try to eliminate one point of failure.","descomposition for maintainability","Development;Staging","Functional tests;Simulation"
"2023/01/13 9:19:50 da tarde CET","Software Development;Software Architecture;Product Management;Coaching","Senior Developer, Architect and Tech Lead","Portugal","15","2","Security;GIS","100 â€“ 1K","< 10","Books;Web resources, blogs","Continuous refactoring interspersed with product evolution","Likely","Likely","Likely","Neutral","Decomposition by business capability (i.e., so that the decomposition reflects the structure of the organization, its teams and business units);Based on coupling and cohesion of the business logic of the monolith (i.e., keep strongly-coupled elements of the implementation in the same services);Based on coupling and cohesion of the data owned by the monolith (i.e., keep strongly-coupled data entities managed by the same services)","No","","","Understanding the monolith;Refactoring code;Regression testing;Deployment automation","Ease of use;Versatility â€“ usable via command line, within IDEs, independently, etc.;Being actively maintained;Having successful case studies reported;Provide an explanation of candidate decompositions;Provide a visualization of candidate decompositions","Agree","Agree","Agree","Strongly Agree","Neutral","Neutral","Agree","","","Neutral","Neutral","Neutral","Neutral","Strongly Agree","Neutral","Neutral","Neutral","Strongly Agree","Change Data Ownership and Move Foreign-Key Relationship to Code","Keep data consistency","","Database migration and data store splitting;Dealing with data consistency;Multitenancy;Effort estimation;Expected long-term return on investment (ROI);Ensuring reliability;Ensuring security","Yes. Performance, code maintenance, easiness of horizontal scaling","Maintainability;Performance, Efficiency;Security;Scalability","","I use the throughput and time for each request","Staging","Simulation"
"2023/01/16 2:10:12 da tarde CET","Software Development;Software Architecture","Architect ","USA","3 ","4","Finance;Real Estate","10K â€“ 100K","50 â€“ 200","Books;Web resources, blogs","Continuous refactoring interspersed with product evolution","Likely","Unlikely","Likely","Very likely","Decomposition by business capability (i.e., so that the decomposition reflects the structure of the organization, its teams and business units);Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design);Based on coupling and cohesion of the business logic of the monolith (i.e., keep strongly-coupled elements of the implementation in the same services);Based on coupling and cohesion of the data owned by the monolith (i.e., keep strongly-coupled data entities managed by the same services)","No","","","Deciding services boundaries;Evaluating a decomposition result;Planning and managing the refactoring process","Ease of use;Requiring minimal manual inputs;Multiple decompositions alternatives;Provide an explanation of candidate decompositions;Provide a visualization of candidate decompositions;Provide comprehensive decomposition guidance;Provide an analysis of the changes of quality attributes and metrics","Strongly Agree","Agree","Agree","Agree","Agree","Agree","Agree","","","Strongly Agree","Agree","Agree","Agree","Agree","Agree","Neutral","Agree","Agree","","","","Database migration and data store splitting;Communication among services;Decoupling services from the monolith;Effort estimation","yes, 
memory usage, latency","Maintainability;Security;Scalability;Availability","set by business ","throughput","Development;Production","Production"
"2023/01/18 12:02:39 da manhÃ£ CET","Software Development;Software Architecture;Teaching","Dev (but I perform in practice as a distinguished engineer)","brazil","8","2","Security","1K â€“ 10K","< 10","Books;Conference presentations;Web resources, blogs","Rewrite/rebuild the entire system from scratch;Stop product evolution, refactor the system to microservices, and then proceed with evolving the product;Migrate some functionality to microservices only.","Likely","Unlikely","Unlikely","Unlikely","Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design);Based on coupling and cohesion of the business logic of the monolith (i.e., keep strongly-coupled elements of the implementation in the same services)","No","","","Evaluating a decomposition result;Regression testing","Ease of use;Support for various programming languages;Having successful case studies reported","Strongly Agree","Agree","Agree","Strongly Disagree","Disagree","Disagree","Strongly Agree","Strangler + change code dep to service call (1st encompasses the 2nd)","1) Finding the functional scope of each microservice; 2) Designing the most appropriate mechanism for service interaction (e.g, REST, Kafka consumer)","Agree","Strongly Agree","Strongly Agree","Agree","Strongly Agree","Neutral","Strongly Agree","Disagree","Strongly Agree","Move Foreign-key + tracer write (same time)
change data ownership + move foreign-key (same time)
tracer write followed by change data ownership
","1) Finding out references in code to data tables that are being migrated. 
2) Getting people used to more centralized data approaches to agree with more granular boundaries with no FK.","Microservice First as a general guideline.","Database migration and data store splitting;Communication among services;Decoupling services from the monolith;Service orchestration;API standardization for services","Sonarqube metrics; subjective evaluation in a design meeting.","Maintainability;Reusability;Availability;Deployability","These 4 quality attributes are the ones where we see the greatest impact.","Maintainability: LOC, complexity, #issues per sonarqube metrics
Reusability: quantity of platform independent endpoints created and published
Deployability: most of our monoliths were not even dockerized. All microservices run in K8S pods and use CI/CD. So it's a very clear gain.
Availability & scalability: microservices on K8S automatically benefit from easily configura number of replicas, roll-out updates, and monitoring infrastructure. ","Development;Production","Functional tests;Production"
"2023/01/18 8:57:21 da manhÃ£ CET","Software Development;Software Architecture;Operations;Coaching;Teaching","Principal Consultant ","Australia ","7","6","Finance;Retail;Media","> 1M","50 â€“ 200","Web resources, blogs;Other practitioners' experiences;External consulting","Continuous refactoring interspersed with product evolution","Likely","Very likely","Very likely","Likely","Decomposition by business capability (i.e., so that the decomposition reflects the structure of the organization, its teams and business units);Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design);Based on coupling and cohesion of the business logic of the monolith (i.e., keep strongly-coupled elements of the implementation in the same services);Based on coupling and cohesion of the data owned by the monolith (i.e., keep strongly-coupled data entities managed by the same services)","No","","","Understanding the monolith;Deciding services boundaries;Regression testing;Analysis of organizational restructuring needs (team size, team organization, etc.)","Ease of use;Versatility â€“ usable via command line, within IDEs, independently, etc.;Requiring minimal manual inputs;Being actively maintained;Having successful case studies reported;Multiple decompositions alternatives;Provide an explanation of candidate decompositions;Provide a visualization of candidate decompositions","Strongly Agree","Strongly Agree","Strongly Agree","Strongly Agree","Disagree","Strongly Agree","Agree","","","Neutral","Agree","Neutral","Neutral","Neutral","Neutral","Neutral","Neutral","Neutral","","","","Dealing with data consistency;Communication among services;Decoupling services from the monolith;Continuous deployment/integration;Team organization;Infrastructure to support microservices;Selecting infrastructure patterns;Ensuring reliability;Ensuring security","No","Maintainability;Business-related indicators;Availability;Team Agility","","A","Production","Functional tests;Production"
"2023/01/18 7:32:43 da tarde CET","Software Development;Software Architecture;Scientific Research","Principal Software Engineer","Brazil","5","5","Education;Real Estate;SAAS products","> 1M","10 â€“ 50","Books;Conference presentations;Other practitioners' experiences","Continuous refactoring interspersed with product evolution","Likely","Likely","Neutral","Neutral","Decomposition by business capability (i.e., so that the decomposition reflects the structure of the organization, its teams and business units);Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design)","No","","","Deciding services boundaries","Support for various programming languages;Having successful case studies reported;Provide a visualization of candidate decompositions","Strongly Agree","Strongly Agree","Strongly Agree","Strongly Agree","Disagree","Disagree","Disagree","Strangler Fig, UI Composition, Parallel Run","Having good/reliable proxy configuration. Keeping reliability of the system","Strongly Disagree","Strongly Disagree","Agree","Strongly Agree","Strongly Agree","Strongly Agree","Strongly Agree","Strongly Disagree","Agree","","","","Database migration and data store splitting;Dealing with data consistency;Expected long-term return on investment (ROI);Infrastructure to support microservices;Ensuring reliability","yes. Manly, team velocity and cycle time","Performance, Efficiency;Availability;Team Agility","main points impacted by the migration","latencies, team cycle time, error rate, availability","Development;Staging;Production","Functional tests;Production"
"2023/01/19 11:44:20 da manhÃ£ CET","Software Development;Software Architecture;Coaching","Partner","Germany","12","5","Finance;Retail;Automotive","10K â€“ 100K","50 â€“ 200","Conference presentations;Other practitioners' experiences;Internal consulting","Rewrite/rebuild the entire system from scratch;Stop product evolution, refactor the system to microservices, and then proceed with evolving the product;Continuous refactoring interspersed with product evolution","Very likely","Likely","Neutral","Unlikely","Decomposition by business capability (i.e., so that the decomposition reflects the structure of the organization, its teams and business units);Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design)","Yes","https://exxfer.io/ - Static Analysis + History","","Understanding the monolith;Deciding services boundaries;Refactoring code;Deployment automation;Microservice API design","Support for various programming languages;Provide an explanation of candidate decompositions","Agree","Neutral","Disagree","Strongly Agree","Agree","Disagree","Strongly Disagree","","","Neutral","Neutral","Neutral","Neutral","Neutral","Neutral","Neutral","Neutral","Neutral","","","","Database migration and data store splitting;Multitenancy;Effort estimation;Expected long-term return on investment (ROI);Team organization","-","Maintainability;Business-related indicators;Reusability;Team Agility","","process duration (based on traces) - more business related than plain technical metrics","Development;Staging;Production","Functional tests;Simulation;Production"
"2023/01/19 3:49:19 da tarde CET","Software Development;Software Architecture;Coaching","Senior Software Engineer","Germany","6","2","Travel and Tourism;Construction","> 1M","50 â€“ 200","Books;Conference presentations;Web resources, blogs;Other practitioners' experiences","Rewrite/rebuild the entire system from scratch;Continuous refactoring interspersed with product evolution","Very unlikely","Neutral","Neutral","Likely","Decomposition by business capability (i.e., so that the decomposition reflects the structure of the organization, its teams and business units);Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design);Based on coupling and cohesion of the data owned by the monolith (i.e., keep strongly-coupled data entities managed by the same services)","No","","","Deciding services boundaries;Regression testing;Deployment automation","Requiring minimal manual inputs;Being actively maintained;Easy modifications on restrictions without having to start over;Provide an explanation of candidate decompositions;Edit/model a candidate decomposition","Strongly Agree","Disagree","Agree","Agree","Disagree","Strongly Agree","Agree","CDC as a first step before e.g. Parallel Run or Branch by Abstraction to decouple the underlying database","Like all techniques, they are often considered ""the best way"" to do something and it is only realized afterwards if they are appropriate. Especially in migrations it is then too late because ""pure"" migrations without new/improved features are rare.","Disagree","Neutral","Disagree","Strongly Disagree","Agree","Disagree","Disagree","Disagree","Agree","","","","Database migration and data store splitting;Dealing with data consistency;Communication among services;Service orchestration;Microservices statefulness;Effort estimation;Team organization;Infrastructure to support microservices;Ensuring reliability","As the decision is usually set in stone, the only evaluation is to decide when the result is ""good enough"" to be the new default. That is often times simply decided by a deadline, not by evaluation results.","Performance, Efficiency;Business-related indicators;Scalability;Team Agility","","The main indicator must usually be some business KPI to decide the benefit of a migration.","Production","Production"
"2023/01/20 1:31:56 da tarde CET","Software Development;Software Architecture;Operations","Software Engineer ","Portugal","1","2","Retail;Education","1K â€“ 10K","10 â€“ 50","Books;Web resources, blogs;Internal consulting","Continuous refactoring interspersed with product evolution","Neutral","Likely","Unlikely","Very likely","Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design)","No","","","Understanding the monolith;Deciding services boundaries;Evaluating a decomposition result;Deployment automation;Microservice API design","Ease of use;Support for various programming languages;Having successful case studies reported;Multiple decompositions alternatives;Provide a visualization of candidate decompositions;Edit/model a candidate decomposition","Strongly Agree","Agree","Strongly Disagree","Agree","Strongly Disagree","Strongly Disagree","Strongly Disagree","","","Neutral","Neutral","Strongly Agree","Neutral","Neutral","Neutral","Neutral","Neutral","Neutral","","","","Dealing with data consistency;Communication among services;Service orchestration;Infrastructure to support microservices;Ensuring reliability","I dont usually evaluate.","Maintainability;Performance, Efficiency;Scalability;Team Agility","","Regarding team agility, I think that the chance to give seperate responsability to each team for the new microservices is a good metric","Development","Simulation"
"2023/01/22 2:18:05 da tarde CET","Software Development;Software Architecture","Tech Lead / Staff Engineer","Germany","7","2","Finance;Retail","100K â€“ 1M","10 â€“ 50","Conference presentations;Web resources, blogs;Other practitioners' experiences;External consulting;Internal consulting","Rewrite/rebuild the entire system from scratch;Stop product evolution, refactor the system to microservices, and then proceed with evolving the product","Neutral","Very likely","Likely","Very likely","Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design);Based on coupling and cohesion of the data owned by the monolith (i.e., keep strongly-coupled data entities managed by the same services)","No","","","Understanding the monolith;Deciding services boundaries;Evaluating a decomposition result;Regression testing;Planning and managing the refactoring process","Being actively maintained;Having successful case studies reported;Provide an explanation of candidate decompositions;Provide a visualization of candidate decompositions;Edit/model a candidate decomposition;Provide an analysis of the changes of quality attributes and metrics","Strongly Agree","Agree","Strongly Disagree","Strongly Agree","Strongly Disagree","Strongly Disagree","Agree","Strangler fig would often go hand in hand with UI composition and ""change code dependency to service call"". As the new service is spun out and facads are replaced with actual service invocations, the Monolith and the UI needed according code changes.","Parallel run is extremely costly as the effort that it takes to ""rebuild"" the Monolith is gravely underestimated and thus the parallel run (with twice the resource costs and increased personnel costs) continues over a long time. Breaking out smaller, individual services that are connected to the Monolith via network calls, come with increased operational complexity.","Strongly Disagree","Agree","Strongly Disagree","Strongly Disagree","Neutral","Strongly Disagree","Strongly Disagree","Strongly Disagree","Agree","","Don't have too much experience with the data-side of the migration. ","","Dealing with data consistency;Communication among services;Effort estimation;Expected long-term return on investment (ROI);Ensuring reliability;Ensuring security","No, but I should","Maintainability;Business-related indicators;Team Agility","I believe Monoliths, if not structured well, harm maintainability and thus breaking up the Monolith should definitely result in improved maintainability to outweigh the additional operational complexity. Another reason to break up a Monolith, in my opinion, is organizational structure: if your teams are blocked or slowed down by working on a single Monolith, breaking up the Monolith may be sensible, but then we also need to evaluate if the team truly got more agile (e.g. deployment frequency). ","deployment frequency to measure agility, mean time to failure to account for the increased operational complexity (maintainability, business impact), number of outdated dependencies (maintainability), PR lead time (agility, maintainability)","Development;Staging;Production","Functional tests;Simulation;Production"
"2023/01/23 6:19:02 da tarde CET","Software Development;Software Architecture;Product Management;Coaching","VP Architecture","United States","14","5","Finance;Retail;Travel and Tourism;Insurance;Media and Entertainment ","> 1M","200 â€“ 600","Conference presentations;Web resources, blogs;Other practitioners' experiences","Stop product evolution, refactor the system to microservices, and then proceed with evolving the product;Continuous refactoring interspersed with product evolution","Very unlikely","Very unlikely","Likely","Likely","Decomposition by business capability (i.e., so that the decomposition reflects the structure of the organization, its teams and business units);Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design);Based on coupling and cohesion of the business logic of the monolith (i.e., keep strongly-coupled elements of the implementation in the same services);Based on coupling and cohesion of the data owned by the monolith (i.e., keep strongly-coupled data entities managed by the same services)","Yes","Jenkins, Artifactory and similar tools","","Regression testing;Deployment automation","Ease of use;Being actively maintained;Having successful case studies reported;Provide comprehensive decomposition guidance","Strongly Agree","Strongly Agree","Strongly Agree","Strongly Agree","Strongly Agree","Strongly Agree","Agree","All together","Denormalizing the data model ","Disagree","Strongly Agree","Strongly Agree","Agree","Strongly Agree","Agree","Agree","Strongly Disagree","Strongly Disagree","Tracer write first","Scaling any remaining relational databases ","Faceted objects","Database migration and data store splitting;Dealing with data consistency;Team organization;Ensuring reliability;Ensuring scalability;Ensuring security","Chaos and canary testing in production ","Performance, Efficiency;Business-related indicators;Scalability;Availability","","Availability. Cost per user. DORA metrics. ","Development;Staging;Production","Functional tests;Simulation;Production"
"2023/01/23 7:37:01 da tarde CET","Software Development;Software Architecture","Aechitect","Netherlands ","4","2","Retail;Wholesale","10K â€“ 100K","10 â€“ 50","Scientific articles;Books;Conference presentations;Web resources, blogs;Other practitioners' experiences;External consulting;Internal consulting","Continuous refactoring interspersed with product evolution","Likely","Unlikely","Neutral","Likely","Decomposition by business capability (i.e., so that the decomposition reflects the structure of the organization, its teams and business units);Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design);Based on coupling and cohesion of the data owned by the monolith (i.e., keep strongly-coupled data entities managed by the same services)","No","","","Deciding services boundaries;Evaluating a decomposition result;Analysis of organizational restructuring needs (team size, team organization, etc.);Microservice API design","Versatility â€“ usable via command line, within IDEs, independently, etc.;Support for various programming languages;Ability to apply restrictions to the decomposition result;Easy modifications on restrictions without having to start over;Provide an explanation of candidate decompositions;Provide comprehensive decomposition guidance","Agree","Neutral","Neutral","Disagree","Neutral","Agree","Disagree","","","Agree","Disagree","Neutral","Agree","Strongly Agree","Neutral","Agree","Disagree","Neutral","","","","Database migration and data store splitting;Dealing with data consistency;Ensuring code maintainability;Service orchestration;Effort estimation;Expected long-term return on investment (ROI);Team organization","Too litle, intuition","Maintainability;Reusability;Team Agility","","agility, rate of feature delivery, rework lost hours","Development","Functional tests"
"2023/01/24 1:20:03 da tarde CET","Software Development;Software Architecture;Teaching","Senior Software Architect","Germany","0","1","Healthcare","100K â€“ 1M","200 â€“ 600","Books;Web resources, blogs;Other practitioners' experiences","Stop product evolution, refactor the system to microservices, and then proceed with evolving the product;Continuous refactoring interspersed with product evolution","Likely","Neutral","Likely","Unlikely","Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design);Based on coupling and cohesion of the business logic of the monolith (i.e., keep strongly-coupled elements of the implementation in the same services);Based on coupling and cohesion of the data owned by the monolith (i.e., keep strongly-coupled data entities managed by the same services)","No","","","Understanding the monolith;Deciding services boundaries;Regression testing;Microservice API design","Support for various programming languages;Being actively maintained;Multiple decompositions alternatives;Provide a visualization of candidate decompositions;Provide an analysis of the changes of quality attributes and metrics","Strongly Agree","Agree","Neutral","Neutral","Neutral","Neutral","Strongly Agree","strangler and code to service call, stepwise in this order","keeping backward compatibility (especially runtime behaviour, compile is typically easy)","Agree","Agree","Neutral","Agree","Strongly Agree","Neutral","Agree","Agree","Neutral","","","","Communication among services;Ensuring code maintainability;Decoupling services from the monolith;Service orchestration;Selecting infrastructure patterns","typically we check that the system still behaves as before with our test bed wich is typically quite good. upfront we check for sensitive parts if the test coverage is really sufficient to judge that. If not we write tests before we do the change to verify that we did not break something with the changes.","Performance, Efficiency;Reusability;Security;Scalability","","When it comes to performance/efficiency we have several ones like duration, latency, ... Reusability we typically try to judge by review and having a look at the dependency tree of the service/component. Security is done with penetration tests and static code checks (metric would be then amount of violations). Scalability also depending on the requirement but typically amount of running instances needed for a specific workload.","Development;Staging","Functional tests;Simulation"
"2023/01/24 2:59:58 da tarde CET","Software Architecture","Architect","Germany","2","2","Healthcare","10K â€“ 100K","200 â€“ 600","Scientific articles;Books;Conference presentations;Web resources, blogs;Other practitioners' experiences;External consulting;Internal consulting","Continuous refactoring interspersed with product evolution","Neutral","Neutral","Neutral","Neutral","Decomposition by business capability (i.e., so that the decomposition reflects the structure of the organization, its teams and business units);Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design);Based on coupling and cohesion of the business logic of the monolith (i.e., keep strongly-coupled elements of the implementation in the same services);Based on coupling and cohesion of the data owned by the monolith (i.e., keep strongly-coupled data entities managed by the same services);Based on lexical similarity (e.g., joining in the same service API endpoints with similar names)","No","","","Understanding the monolith;Deciding services boundaries;Microservice API design","Ease of use;Requiring minimal manual inputs","Strongly Agree","Neutral","Neutral","Neutral","Disagree","Agree","Neutral","","","Neutral","Neutral","Neutral","Neutral","Neutral","Neutral","Neutral","Neutral","Neutral","","","","Dealing with data consistency;Communication among services;Decoupling services from the monolith;Service orchestration;Ensuring reliability;Ensuring scalability","Tests","Maintainability;Performance, Efficiency;Business-related indicators;Scalability","","KPIs","Development","Functional tests;Production"
"2023/01/24 5:03:13 da tarde CET","Software Development;Software Architecture;Scientific Research","Senior key expert/architect","Austria","4","1","Manufacturing","1K â€“ 10K","10 â€“ 50","Scientific articles;Books;Conference presentations;Web resources, blogs;Other practitioners' experiences","Rewrite/rebuild the entire system from scratch;Continuous refactoring interspersed with product evolution","Neutral","Neutral","Likely","Very likely","Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design)","No","","","Deciding services boundaries;Refactoring code;Evaluating a decomposition result;Microservice API design","Having successful case studies reported;Ability to apply restrictions to the decomposition result;Easy modifications on restrictions without having to start over;Multiple decompositions alternatives;Provide an explanation of candidate decompositions;Provide a visualization of candidate decompositions;Edit/model a candidate decomposition;Provide an analysis of the changes of quality attributes and metrics","Neutral","Neutral","Neutral","Neutral","Neutral","Neutral","Agree"," Change code dependency to service call","synchronizing the updates of services","Neutral","Neutral","Neutral","Neutral","Neutral","Neutral","Neutral","Neutral","Neutral","","","Model driven engineering + microservice architecture","Dealing with data consistency;Communication among services;Ensuring scalability","In the current project, I'm not aware if it was done.","Performance, Efficiency;Scalability;Availability","It is important to design microservices that are ""suitable"" to be executed in a shared environment managed for example by Kubernetes. Since in these environment scaling and load balancing is done automatically and services design should benefit from these features of the infrastructure. For example, each instance of a services should not consume too much resources (CPU, memory) and should be initialized and running fast.","Avg. response time, throughput, memory and CPU consumption, network latency. Checking data consistency when some services crashes.","Development;Staging;Production","Functional tests;Simulation;Production"
"2023/01/28 6:01:32 da tarde CET","Software Development;Software Architecture","Engineering Manager","Spain","5","2","Retail;Supply Chain Management","100K â€“ 1M","< 10","Scientific articles;Books;Conference presentations;Web resources, blogs;Other practitioners' experiences","Continuous refactoring interspersed with product evolution","Unlikely","Likely","Neutral","Very likely","Decomposition by business capability (i.e., so that the decomposition reflects the structure of the organization, its teams and business units);Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design)","No","","","Regression testing;Analysis of organizational restructuring needs (team size, team organization, etc.);Planning and managing the refactoring process;Microservice API design","Having successful case studies reported;Ability to apply restrictions to the decomposition result;Easy modifications on restrictions without having to start over;Edit/model a candidate decomposition;Provide comprehensive decomposition guidance;Provide an analysis of the changes of quality attributes and metrics","Strongly Agree","Strongly Disagree","Agree","Strongly Agree","Neutral","Agree","Agree","","Having all engineers (new to mciroservices) understanding it, and why they are using it... What are the risks, and what to be careful with. How to test it well. Etc. ","Strongly Disagree","Neutral","Neutral","Neutral","Strongly Agree","Agree","Neutral","Neutral","Strongly Agree","","","","Database migration and data store splitting;Continuous deployment/integration;Effort estimation;Expected long-term return on investment (ROI);Team organization;Infrastructure to support microservices","Comparing data and non-functional metrics between old and new system. Evaluating the flexibility/maintainability of developing in the new system. Can we have different teams for different boundaries? Can they change things independently, with clear abstractions between boundaries? ","Maintainability;Business-related indicators;Scalability;Team Agility","","Agility: autonomous development, number of blockers or dependencies between teams. Organizational structure. Scalability: Capacity to deal with more transactions by increasing the number of instances/containers/servers or their capacity (cpu/memory) ","Development;Staging;Production","Functional tests;Simulation;Production"
"2023/01/30 2:04:18 da tarde CET","Software Development;Software Architecture;Scientific Research","Technology Expert","India","1","1","Manufacturing;Automotive","1K â€“ 10K","50 â€“ 200","Web resources, blogs;Other practitioners' experiences;External consulting","Continuous refactoring interspersed with product evolution","Very likely","Likely","Likely","Likely","Decomposition by business capability (i.e., so that the decomposition reflects the structure of the organization, its teams and business units);Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design)","No","","","Understanding the monolith;Deciding services boundaries;Refactoring code;Evaluating a decomposition result;Deployment automation","Requiring minimal manual inputs;Multiple decompositions alternatives;Provide an explanation of candidate decompositions;Provide comprehensive decomposition guidance","Strongly Agree","Neutral","Strongly Agree","Strongly Agree","Strongly Agree","Neutral","Agree","","","Agree","Strongly Agree","Strongly Agree","Neutral","Neutral","Neutral","Neutral","Neutral","Neutral","","","","Database migration and data store splitting;Dealing with data consistency;Communication among services;Decoupling services from the monolith;Multitenancy","Based on customer requirement, identify metrics and cost vs subscription checking","Performance, Efficiency;Security;Scalability;Availability","","Response time, resource utilization","Development;Staging;Production","Functional tests;Production"
"2023/01/31 1:26:55 da tarde CET","Software Development;Software Architecture;Operations;Teaching","Chief Technologist","Germany","7","3","Manufacturing;Automotive","100K â€“ 1M","10 â€“ 50","Books;Conference presentations;Web resources, blogs","Continuous refactoring interspersed with product evolution","Neutral","Unlikely","Likely","Likely","Decomposition by business capability (i.e., so that the decomposition reflects the structure of the organization, its teams and business units);Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design);Based on coupling and cohesion of the business logic of the monolith (i.e., keep strongly-coupled elements of the implementation in the same services);Based on coupling and cohesion of the data owned by the monolith (i.e., keep strongly-coupled data entities managed by the same services)","Yes","","","Understanding the monolith;Refactoring code;Regression testing;Deployment automation","Ease of use;Being actively maintained;Multiple decompositions alternatives;Provide a visualization of candidate decompositions","Strongly Agree","Neutral","Strongly Agree","Agree","Agree","Neutral","Neutral","Branch by abstraction as general start, if applicable. Then apply strangler pattern gradually. I assume parallel run is something similar as blue/green deployment. Use this constantly for rollouts.","That you cannot make general assumptions about the underlying software. Each one is completely different.","Neutral","Neutral","Neutral","Neutral","Neutral","Neutral","Neutral","Neutral","Neutral","I don't have any answers on this.","I don't have any answers on this.","","Database migration and data store splitting;Dealing with data consistency;Microservices statefulness;Effort estimation;Expected long-term return on investment (ROI);Ensuring security","Testing: API, Contract-Driven Tests","Maintainability;Performance, Efficiency;Security;Team Agility","Scalability and Availability are factors given by the platform, if the microservices are implemented correctly. The other factors depend more on the microservices itself.","Consistency for all service invocations, performance, team happiness :-)","Development;Staging","Functional tests;Simulation;Production"
"2023/02/01 10:57:57 da tarde CET","Software Development;Software Architecture","Staff Engineer ","Italy","10","5","Retail;Media ","> 1M","50 â€“ 200","Books;Conference presentations;Web resources, blogs;Other practitioners' experiences","Continuous refactoring interspersed with product evolution","Very unlikely","Very unlikely","Very unlikely","Very unlikely","Decomposition by business capability (i.e., so that the decomposition reflects the structure of the organization, its teams and business units);Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design)","Yes","Testing tools, CI","","Deciding services boundaries;Deployment automation;Analysis of organizational restructuring needs (team size, team organization, etc.)","Being actively maintained;Having successful case studies reported;Ability to apply restrictions to the decomposition result;Easy modifications on restrictions without having to start over;Multiple decompositions alternatives;Provide an explanation of candidate decompositions;Edit/model a candidate decomposition;Provide comprehensive decomposition guidance","Strongly Agree","Agree","Neutral","Agree","Strongly Disagree","Strongly Disagree","Disagree","Mainly strangler fig. Parallel run is useful in high risk scenarios and goes well with property based testing to compare results, but Iâ€™ve used it rarely.","People are unaware of them and sometimes use a bad alternative without thinking of the consequences.","Disagree","Strongly Disagree","Strongly Disagree","Strongly Disagree","Disagree","Agree","Strongly Agree","Neutral","Agree","Transferring data to the service via initial sync + streaming and then switching source is preferred. Synchronise data in application can be fairly useful at the risk of having to support distributed transactions.","Risk of data loss if performed incorrectly.","","Database migration and data store splitting;Communication among services;Team organization;Ensuring reliability",".","Business-related indicators;Team Agility",".",".","Production","Functional tests;Production"
"2023/02/04 8:08:46 da tarde CET","Software Development;Software Architecture;Operations","Senior Developer","Germany","5","2","Insurance","< 100","10 â€“ 50","Conference presentations;Web resources, blogs","Rewrite/rebuild the entire system from scratch;Continuous refactoring interspersed with product evolution","Very unlikely","Unlikely","Neutral","Very likely","Based on coupling and cohesion of the business logic of the monolith (i.e., keep strongly-coupled elements of the implementation in the same services);Based on coupling and cohesion of the data owned by the monolith (i.e., keep strongly-coupled data entities managed by the same services)","Yes","Jenkins as Buildserver, GIT as Verion Control, Kubernetes/OpenShift as Container Platform","Container Orchestration","Deciding services boundaries;Refactoring code;Evaluating a decomposition result","Requiring minimal manual inputs;Doing the refactoring quickly;Provide comprehensive decomposition guidance","Strongly Agree","Disagree","Disagree","Neutral","Disagree","Agree","Agree","Strangler Fig and Change Data Capture or Change code dependency to service call","From project persepective: To separate functionality or data that is shared across different ""services"" of the monolith may result in heavy refactoring and development work. That is expensive and the benefit is not always visible/worth the investment for the customer or person being responsible for the budget.
From developers perspective: The biggest challenge is to do the refactoring without puting other (external) services/clients or teams at risk. If you have dependencies to services you are not responsible for it is always more complex to apply changes.","Disagree","Disagree","Agree","Agree","Agree","Disagree","Disagree","Disagree","Agree","","","","Database migration and data store splitting;Dealing with data consistency;Ensuring code maintainability;Decoupling services from the monolith;Microservices statefulness;Expected long-term return on investment (ROI);Ensuring security","The evaluation is basically the same we do for changes at the monolith as well. Validating functionality, business logic etc. It is not really validated if the decomposition was done the most efficient way. That is something that is usually done before and during the implementation by consideing how to achieve the be result (i.e. Maintainability and Reusability)","Maintainability;Reusability;Scalability;Team Agility","These attributes are most featured by micro services. Functionality, performance and security for example are also quite easy to achieve with a monolith.","-","Development","Functional tests"
"2023/02/06 11:43:23 da manhÃ£ CET","Software Development;Software Architecture;Coaching;Teaching","Senior Software Architect","Germany","5","4","Finance","10K â€“ 100K","50 â€“ 200","Scientific articles;Books;Conference presentations;Web resources, blogs;Other practitioners' experiences;External consulting","Rewrite/rebuild the entire system from scratch;Stop product evolution, refactor the system to microservices, and then proceed with evolving the product;Continuous refactoring interspersed with product evolution","Unlikely","Neutral","Likely","Very likely","Decomposition by business capability (i.e., so that the decomposition reflects the structure of the organization, its teams and business units);Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design);Based on coupling and cohesion of the business logic of the monolith (i.e., keep strongly-coupled elements of the implementation in the same services)","No","","","Deciding services boundaries;Analysis of organizational restructuring needs (team size, team organization, etc.)","Support for various programming languages;Being actively maintained;Ability to apply restrictions to the decomposition result;Multiple decompositions alternatives;Provide an explanation of candidate decompositions;Provide a visualization of candidate decompositions;Edit/model a candidate decomposition;Provide comprehensive decomposition guidance","Strongly Agree","Agree","Strongly Agree","Strongly Agree","Neutral","Strongly Agree","Neutral","Change Data Capture	before Parallel Run, Branch by Abstraction as a step of Strangler Fig","","Agree","Agree","Neutral","Agree","Strongly Agree","Agree","Neutral","Neutral","Neutral","","inadequate database tooling","","Database migration and data store splitting;Dealing with data consistency;Team organization;Infrastructure to support microservices","architecture fitness functions","Performance, Efficiency;Scalability;Availability","business drivers","i use availability percentage to measure the availability; i use parallel efficiency and mean-time-to-startup to measure scalability; i use latency to measure time behaviour","Staging;Production","Functional tests;Production"
"2023/02/08 8:28:43 da manhÃ£ CET","Software Development;Software Architecture;Quality assurance;Coaching","Chief Architect","Germany","8 ","5","Automotive;Public Services","10K â€“ 100K","200 â€“ 600","Books;Conference presentations;Web resources, blogs;Other practitioners' experiences;Internal consulting","Rewrite/rebuild the entire system from scratch;Continuous refactoring interspersed with product evolution","Very likely","Neutral","Very likely","Very likely","Decomposition by business capability (i.e., so that the decomposition reflects the structure of the organization, its teams and business units);Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design);Based on coupling and cohesion of the business logic of the monolith (i.e., keep strongly-coupled elements of the implementation in the same services);Based on coupling and cohesion of the data owned by the monolith (i.e., keep strongly-coupled data entities managed by the same services)","No","","","Understanding the monolith;Deciding services boundaries;Planning and managing the refactoring process;Microservice API design","Ease of use;Having successful case studies reported;Provide an explanation of candidate decompositions;Provide a visualization of candidate decompositions","Strongly Agree","Strongly Agree","Agree","Agree","Agree","Agree","Agree","","Techniques are important, but far more important is deep knowledge into the business and their requirements.","Agree","Agree","Agree","Agree","Strongly Agree","Neutral","Agree","Agree","Disagree","","","","Dealing with data consistency;Communication among services;Decoupling services from the monolith","yes","Maintainability;Performance, Efficiency;Business-related indicators;Scalability","","Metrics depend on the (non functional) requirements.  ","Development;Staging","Functional tests"
"2023/02/08 4:25:20 da tarde CET","Software Development;Software Architecture","Principal Software Architect","Germany","6","2","Retail;Insurance","> 1M","50 â€“ 200","Scientific articles;Books;Conference presentations;Web resources, blogs","Rewrite/rebuild the entire system from scratch","Unlikely","Likely","Very likely","Very likely","Decomposition by business capability (i.e., so that the decomposition reflects the structure of the organization, its teams and business units);Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design);Based on coupling and cohesion of the data owned by the monolith (i.e., keep strongly-coupled data entities managed by the same services)","No","","","Evaluating a decomposition result;Analysis of organizational restructuring needs (team size, team organization, etc.)","Support for various programming languages;Being actively maintained;Multiple decompositions alternatives;Provide an explanation of candidate decompositions;Provide a visualization of candidate decompositions","Strongly Agree","Strongly Agree","Disagree","Agree","Strongly Agree","Strongly Disagree","Neutral","Strangler Fig together with Decorating Collaborator","Keeping Product Development and the Migration Development in balance. Identification which pattern to use. Also handling a potential concept mapping between old and new systems that is necessary, as these pattern usually assume that there is no change from a business process/behaviour perspective.","Neutral","Strongly Disagree","Strongly Disagree","Strongly Disagree","Strongly Disagree","Agree","Agree","Strongly Disagree","Strongly Agree","Synchronize Data in Application together with Tracer Write","","Unnamed Pattern: Split the migration process also in smaller chunks based on tenants. That means using one pattern but only apply it for a certain amount of users/tenants. Verifying that it works for this group, and incrementally shift the migrated functionality to more and more customers.","Dealing with data consistency;Multitenancy;Team organization;Ensuring reliability","No, not with hard facts.","Business-related indicators","Being able to deliver new features in the new system is not compared to estimates of changing the monolith. It is enough that we can deliver new features.","Developed Features","Production","Production"
"2023/02/08 11:43:50 da tarde CET","Software Development;Software Architecture;Operations;Quality assurance;Coaching;Teaching;Scientific Research","Tech lead","Portugal ","3","2","Social Media;Travel and Tourism","> 1M","50 â€“ 200","Web resources, blogs;Other practitioners' experiences;External consulting;Internal consulting","Rewrite/rebuild the entire system from scratch;Stop product evolution, refactor the system to microservices, and then proceed with evolving the product;Continuous refactoring interspersed with product evolution","Unlikely","Likely","Very unlikely","Very likely","Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design);Based on coupling and cohesion of the business logic of the monolith (i.e., keep strongly-coupled elements of the implementation in the same services)","Yes","","","Regression testing;Deployment automation","Testing","Strongly Agree","Strongly Agree","Agree","Neutral","Disagree","Disagree","Disagree","","","Disagree","Neutral","Neutral","Agree","Agree","Strongly Disagree","Strongly Disagree","Strongly Disagree","Strongly Disagree","","","","Database migration and data store splitting;Communication among services;Service orchestration","No",".","",".","Development;Staging;Production","Functional tests;Simulation;Production"
"2023/02/17 10:37:51 da manhÃ£ CET","Software Development;Software Architecture;Quality assurance;Coaching","Teamlead Backend Development","Trusted Shops AG","20","5","eCommerce","> 1M","> 600","Books;Conference presentations;Web resources, blogs;External consulting","Continuous refactoring interspersed with product evolution","Very unlikely","Unlikely","Likely","Very likely","Decomposition by business capability (i.e., so that the decomposition reflects the structure of the organization, its teams and business units);Decomposition by subdomain (i.e., so that the decomposition reflects an analysis of the processes and information flows of the business. e.g., using Domain-Driven Design);Based on coupling and cohesion of the data owned by the monolith (i.e., keep strongly-coupled data entities managed by the same services)","No","","","Understanding the monolith;Regression testing;Deployment automation;Microservice API design","Versatility â€“ usable via command line, within IDEs, independently, etc.;Requiring minimal manual inputs;Being actively maintained;Easy modifications on restrictions without having to start over;Multiple decompositions alternatives;Provide an explanation of candidate decompositions;Provide a visualization of candidate decompositions;Edit/model a candidate decomposition","Disagree","Agree","Agree","Neutral","Strongly Disagree","Strongly Disagree","Disagree","","","Strongly Disagree","Strongly Disagree","Strongly Disagree","Agree","Strongly Agree","Agree","Strongly Disagree","Strongly Disagree","Neutral","","","","Database migration and data store splitting;Dealing with data consistency;Communication among services;Effort estimation;Team organization;Ensuring security","new value for the customer","Maintainability;Performance, Efficiency;Scalability;Availability","","cycle time of the dev teams","Staging","Functional tests"
"2023/02/19 8:40:37 da manhÃ£ CET","Software Development;Software Architecture","Senior Developer","INDIA","5","3","Finance;Retail","100K â€“ 1M","50 â€“ 200","Scientific articles;Books;Conference presentations;Web resources, blogs;Internal consulting","Rewrite/rebuild the entire system from scratch;Continuous refactoring interspersed with product evolution","Unlikely","Likely","Likely","Likely","Decomposition by business capability (i.e., so that the decomposition reflects the structure of the organization, its teams and business units);Based on coupling and cohesion of the business logic of the monolith (i.e., keep strongly-coupled elements of the implementation in the same services);Based on lexical similarity (e.g., joining in the same service API endpoints with similar names)","Yes","Jmeter for performance testing, JIRA for planning","","Understanding the monolith;Deciding services boundaries;Refactoring code;Regression testing;Planning and managing the refactoring process","Ease of use;Versatility â€“ usable via command line, within IDEs, independently, etc.;Doing the refactoring quickly;Multiple decompositions alternatives;Edit/model a candidate decomposition;Provide comprehensive decomposition guidance","Agree","Agree","Agree","Agree","Disagree","Agree","Agree","","","Agree","Agree","Disagree","Agree","Agree","Agree","Agree","Agree","Agree","","","Feature based development- Aggregation in monolith","Database migration and data store splitting;Dealing with data consistency;Communication among services;Decoupling services from the monolith;Service orchestration;Effort estimation;Selecting infrastructure patterns","No","Business-related indicators;Reusability;Scalability;Availability","","Specific response time of endpoints","Development;Staging","Functional tests;Simulation"
"2023/05/24 10:34:18 da manhÃ£ CET","Software Development","Junior Backend Developer","Portugal","2","1","Casino Game Provider","10K â€“ 100K","< 10","Web resources, blogs;Internal consulting","Stop product evolution, refactor the system to microservices, and then proceed with evolving the product","Neutral","Neutral","Neutral","Neutral","Decomposition by business capability (i.e., so that the decomposition reflects the structure of the organization, its teams and business units);Based on coupling and cohesion of the data owned by the monolith (i.e., keep strongly-coupled data entities managed by the same services)","No","","","Regression testing","Ease of use;Support for various programming languages;Doing the refactoring quickly;Having successful case studies reported;Easy modifications on restrictions without having to start over;Provide an explanation of candidate decompositions;Provide comprehensive decomposition guidance","Neutral","Neutral","Agree","Neutral","Neutral","Neutral","Strongly Agree","","Ensuring the behavior of the microservice is the exact same as the the previous version ","Neutral","Neutral","Neutral","Neutral","Neutral","Neutral","Neutral","Neutral","Neutral","","","","Ensuring code maintainability;Decoupling services from the monolith;Ensuring reliability;Ensuring scalability;Ensuring security","Heavy Load tests as well as regression tests","Performance, Efficiency;Business-related indicators;Scalability","Making sure the requirements of the system are still fulfilled but provide a better performance / scalability which is very important in my area","Measuring the delay in requests in our system relative to the load (requests per second) and the instances we need to scale","Development;Staging;Production","Functional tests;Simulation"